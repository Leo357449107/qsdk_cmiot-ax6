From 4c972513be59681bc9b55ceb3f4cb61471aa14a9 Mon Sep 17 00:00:00 2001
From: Ankith Shashikanthreddy<ashashik@codeaurora.org>
Date: Wed, 2 Jun 2021 15:15:27 +0530
Subject: [PATCH] [busybox] Add option for arping to listen on bridge

When a specific egress interface is used with arping, it is necessary to
receive the response on the bridge (since a socket bound to the
underlying interface is bypassed). Add a -B option to specify the bridge
name. When this option is present, perform the send on the interface
specified with the -I option and the receive on the interface specified
with the -B option[busybox] Add option for arping to listen on bridge

Signed-off-by: Ankith Shashikanthreddy <ashashik@codeaurora.org>
Signed-off-by: Sandhya KS <sandhyks@codeaurora.org>
---
 networking/arping.c | 95 +++++++++++++++++++++++++++++----------------
 1 file changed, 61 insertions(+), 34 deletions(-)

diff --git a/networking/arping.c b/networking/arping.c
index 901578b..47b81f8 100644
--- a/networking/arping.c
+++ b/networking/arping.c
@@ -30,6 +30,7 @@
 //usage:     "\n	-w TIMEOUT	Seconds to wait for ARP reply"
 //NB: in iputils-s20160308, iface is mandatory, no default
 //usage:     "\n	-I IFACE	Interface to use (default eth0)"
+//usage:     "\n	-B IFACE	Bridge interface use for receive (default none)"
 //usage:     "\n	-s SRC_IP	Sender IP address"
 //usage:     "\n	DST_IP		Target IP address"
 
@@ -54,20 +55,22 @@ enum {
 	UNICASTING    = 1 << 6,
 	TIMEOUT       = 1 << 7,
 };
-#define GETOPT32(str_timeout, device, source) \
+#define GETOPT32(str_timeout, device, source, bridge_device) \
 	getopt32(argv, "^" \
-		"UDAqfbc:+w:I:s:" \
+		"UDAqfbc:+w:I:s:B:" \
 		/* DAD also sets quit_on_reply, */ \
 		/* advert also sets unsolicited: */ \
 		"\0" "=1:Df:AU", \
-		&count, &str_timeout, &device, &source \
+		&count, &str_timeout, &device, &source, &bridge_device \
 	);
 
 struct globals {
 	struct in_addr src;
 	struct in_addr dst;
 	struct sockaddr_ll me;
+	struct sockaddr_ll me_br;   // bridge interface
 	struct sockaddr_ll he;
+	int sock_br;  // socket for receiving on bridge
 
 	int count; // = -1;
 	unsigned last;
@@ -89,7 +92,9 @@ struct globals {
 #define src        (G.src       )
 #define dst        (G.dst       )
 #define me         (G.me        )
+#define me_br      (G.me_br     )
 #define he         (G.he        )
+#define sock_br    (G.sock_br   )
 #define count      (G.count     )
 #define last       (G.last      )
 #define timeout_us (G.timeout_us)
@@ -292,10 +297,52 @@ static void recv_pack(unsigned char *buf, int len, struct sockaddr_ll *FROM)
 	}
 }
 
+static int init_sock_ll(int sock, const char *device,
+                        struct sockaddr_ll *addr,
+                        const char *err_str) {
+	struct ifreq ifr;
+
+	memset(&ifr, 0, sizeof(ifr));
+	strncpy_IFNAMSIZ(ifr.ifr_name, device);
+	/* We use ifr.ifr_name in error msg so that problem
+	 * with truncated name will be visible */
+	ioctl_or_perror_and_die(sock, SIOCGIFINDEX, &ifr, err_str, "not found");
+	addr->sll_ifindex = ifr.ifr_ifindex;
+	addr->sll_family = AF_PACKET;
+	addr->sll_protocol = htons(ETH_P_ARP);
+
+	xbind(sock, (struct sockaddr *) addr, sizeof(*addr));
+
+	{
+		socklen_t alen = sizeof(*addr);
+		getsockname(sock_fd, (struct sockaddr *) addr, &alen);
+		//never happens:
+		//if (getsockname(sock_fd, (struct sockaddr *) &me, &alen) == -1)
+		//	bb_perror_msg_and_die("getsockname");
+	}
+	if (addr->sll_halen == 0) {
+		bb_error_msg(err_str, "is not ARPable (no ll address)");
+		return (option_mask32 & DAD ? 0 : 2);
+	}
+
+	xioctl(sock, SIOCGIFFLAGS, (char *) &ifr);
+
+	if (!(ifr.ifr_flags & IFF_UP)) {
+		bb_error_msg_and_die(err_str, "is down");
+	}
+	if (ifr.ifr_flags & (IFF_NOARP | IFF_LOOPBACK)) {
+		bb_error_msg(err_str, "is not ARPable");
+		return -1;
+	}
+
+	return 0;
+}
+
 int arping_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
 int arping_main(int argc UNUSED_PARAM, char **argv)
 {
 	const char *device = "eth0";
+	const char *bridge_device = NULL;
 	char *source = NULL;
 	char *target;
 	char *err_str;
@@ -312,7 +359,7 @@ int arping_main(int argc UNUSED_PARAM, char **argv)
 		unsigned opt;
 		char *str_timeout;
 
-		opt = GETOPT32(str_timeout, device, source);
+		opt = GETOPT32(str_timeout, device, source, bridge_device);
 		if (opt & TIMEOUT)
 			timeout_us = xatou_range(str_timeout, 0, INT_MAX/2000000) * 1000000 + 500000;
 	}
@@ -321,21 +368,17 @@ int arping_main(int argc UNUSED_PARAM, char **argv)
 	err_str = xasprintf("interface %s %%s", device);
 	xfunc_error_retval = 2;
 
-	/*memset(&G.ifr, 0, sizeof(G.ifr)); - zeroed by INIT_G */
-	strncpy_IFNAMSIZ(G.ifr.ifr_name, device);
-	ioctl_or_perror_and_die(sock_fd, SIOCGIFINDEX, &G.ifr, err_str, "not found");
-	me.sll_ifindex = G.ifr.ifr_ifindex;
+	if (init_sock_ll(sock_fd, device, &me, err_str) == -1) {
+		return (option_mask32 & DAD ? 0 : 2);
+	}
 
-	xioctl(sock_fd, SIOCGIFFLAGS, (char *) &G.ifr);
+	if (bridge_device) {
+		sock_br = xsocket(AF_PACKET, SOCK_DGRAM, 0);
 
-	if (!(G.ifr.ifr_flags & IFF_UP)) {
-		bb_error_msg_and_die(err_str, "is down");
-	}
-	if (G.ifr.ifr_flags & (IFF_NOARP | IFF_LOOPBACK)) {
-		bb_error_msg(err_str, "is not ARPable");
-		BUILD_BUG_ON(DAD != 2);
-		/* exit 0 if DAD, else exit 2 */
-		return (~option_mask32 & DAD);
+		err_str = xasprintf("interface %s %%s", bridge_device);
+		if (init_sock_ll(sock_br, bridge_device, &me_br, err_str) == -1) {
+			return (option_mask32 & DAD ? 0 : 2);
+		}
 	}
 
 	/* if (!inet_aton(target, &dst)) - not needed */ {
@@ -381,21 +424,6 @@ int arping_main(int argc UNUSED_PARAM, char **argv)
 		close(probe_fd);
 	}
 
-	me.sll_family = AF_PACKET;
-	//me.sll_ifindex = ifindex; - done before
-	me.sll_protocol = htons(ETH_P_ARP);
-	xbind(sock_fd, (struct sockaddr *) &me, sizeof(me));
-
-	bb_getsockname(sock_fd, (struct sockaddr *) &me, sizeof(me));
-	//never happens:
-	//if (getsockname(sock_fd, (struct sockaddr *) &me, &alen) == -1)
-	//	bb_perror_msg_and_die("getsockname");
-	if (me.sll_halen == 0) {
-		bb_error_msg(err_str, "is not ARPable (no ll address)");
-		BUILD_BUG_ON(DAD != 2);
-		/* exit 0 if DAD, else exit 2 */
-		return (~option_mask32 & DAD);
-	}
 	he = me;
 	memset(he.sll_addr, -1, he.sll_halen);
 
@@ -424,8 +452,7 @@ int arping_main(int argc UNUSED_PARAM, char **argv)
 		 * inherited procmask is blocking SIGALRM.
 		 */
 		sigprocmask(SIG_UNBLOCK, &G.sset, NULL);
-
-		cc = recvfrom(sock_fd, G.packet, sizeof(G.packet), 0, (struct sockaddr *) &from, &alen);
+		cc = recvfrom(bridge_device ? sock_br : sock_fd, G.packet, sizeof(G.packet), 0, (struct sockaddr *) &from, &alen);
 
 		/* Don't allow SIGALRMs while we process the reply */
 		sigprocmask(SIG_BLOCK, &G.sset, NULL);
-- 
2.17.1

