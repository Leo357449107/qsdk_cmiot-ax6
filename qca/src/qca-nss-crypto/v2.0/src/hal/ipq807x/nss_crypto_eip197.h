/* Copyright (c) 2016-2019, The Linux Foundation. All rights reserved.
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 *
 *
 */
#ifndef __NSS_CRYPTO_EIP197_H
#define __NSS_CRYPTO_EIP197_H

#include <linux/types.h>

/*
 * Common configuration data for command and result
 * descriptor rings
 */
#define NSS_CRYPTO_EIP197_ENB_DMA ((0x6 << 28) | (0x7 << 24))
#define NSS_CRYPTO_EIP197_CMD_SZ 0xc0100010
#define NSS_CRYPTO_EIP197_CMD_FETCH_SZ ((0x10 << 16) | 0x10)
#define NSS_CRYPTO_EIP197_RST_CMD 0x1F

/*
 * Result Descriptor ring specific Macros
 */
#define NSS_CRYPTO_EIP197_RES_SZ 0x80100010
#define NSS_CRYPTO_EIP197_RES_FETCH_SZ 0x2100010
#define NSS_CRYPTO_EIP197_RES_PROC_SZ (0x1 << 10)
#define NSS_CRYPTO_EIP197_RST_RES 0xFF

/*
 * EIP197 Internal DMA specific configuration
 */
#define NSS_CRYPTO_EIP197_CLR_CNT (0x1 << 31)
#define NSS_CRYPTO_EIP197_CLR_DMA (0x1 << 24)
#define NSS_CRYPTO_EIP197_CLR_DMA_CTRL (0x1 << 23)

/*
 * Data Fetch Engine related Fields
 */
#define NSS_CRYPTO_EIP197_DFE_RST_DONE 0x4F000
#define NSS_CRYPTO_EIP197_DFE_RST_CTRL 0x80000000
#define NSS_CRYPTO_EIP197_DFE_CFG 0xA7250935

/*
 * Data Store Engine related fields
 */
#define NSS_CRYPTO_EIP197_DSE_RST_DONE 0xF000
#define NSS_CRYPTO_EIP197_DSE_AGGRESIVE_MODE (0x1 << 31)
#define NSS_CRYPTO_EIP197_DSE_EN_SINGLE_WR (0x1 << 29)
#define NSS_CRYPTO_EIP197_DSE_BUFFER_CTRL (0x1 << 15)
#define NSS_CRYPTO_EIP197_DSE_RD_CACHE 0x10
#define NSS_CRYPTO_EIP197_DSE_OUTPUT_BUF_MIN 7
#define NSS_CRYPTO_EIP197_DSE_OUTPUT_BUF_MAX (0x8 << 8)
#define NSS_CRYPTO_EIP197_ENB_DSE_THREAD (0x1 << 30)

#define NSS_CRYPTO_EIP197_DSE_CFG \
	(NSS_CRYPTO_EIP197_DSE_AGGRESIVE_MODE | NSS_CRYPTO_EIP197_DSE_BUFFER_CTRL | \
	NSS_CRYPTO_EIP197_DSE_OUTPUT_BUF_MAX | NSS_CRYPTO_EIP197_DSE_RD_CACHE | \
	NSS_CRYPTO_EIP197_DSE_OUTPUT_BUF_MIN)

/*
 * HIA LA and inline mode control value
 */
#define NSS_CRYPTO_EIP197_INLINE_CFG 0x387000
#define NSS_CRYPTO_EIP197_HIA_CFG 0xfe000022

/*
 * NSS_CRYPTO_EIP197 modules reset value
 */
#define NSS_CRYPTO_EIP197_HIA_RST (0x1 << 31)
#define NSS_CRYPTO_EIP197_DSE_CFG_RST ((0x1 << 31) | (0x1 << 15))
#define NSS_CRYPTO_EIP197_TOKEN_CTRL_RST 0x4004
#define NSS_CRYPTO_EIP197_OUT_TRANS_RST 0xfc400847
#define NSS_CRYPTO_EIP197_RST_PE 0xc001

/*
 * HIA Ring Arbiter Macros
 * Used to enable Rings
 */
#define NSS_CRYPTO_EIP197_ENB_ALL_RINGS 0x400002FF

/*
 * PRNG related SEED values
 * Note: These are defined by HW documentation
 */
#define NSS_CRYPTO_EIP197_PRNG_SEED_LO 0x48c24cfd
#define NSS_CRYPTO_EIP197_PRNG_SEED_HI 0x6c07f742
#define NSS_CRYPTO_EIP197_PRNG_KEY0_LO 0xaee75681
#define NSS_CRYPTO_EIP197_PRNG_KEY0_HI 0xf27c239
#define NSS_CRYPTO_EIP197_PRNG_KEY1_LO 0x79947198
#define NSS_CRYPTO_EIP197_PRNG_KEY1_HI 0xe2991275
#define NSS_CRYPTO_EIP197_PRNG_LFSR_LO 0x21ac3c7c
#define NSS_CRYPTO_EIP197_PRNG_LFSR_HI 0xd008c4b4
#define NSS_CRYPTO_EIP197_PRNG_CTRL 0x3

/*
 * We need 4 words of metadata to be passed from
 * input to output descriptor. The following macro
 * is used to enable this feature
 */
#define NSS_CRYPTO_EIP197_ENB_MDATA 0x1

/*
 * Configure Processing engine token control register
 */
#define NSS_CRYPTO_EIP197_TOKEN_CFG 0x404004

/*
 * Configure Input and Output classification's engine
 * - Scractch RAM access bit
 * - Engine internal timer
 */
#define NSS_CRYPTO_EIP197_ENB_SCRATCH_RAM 0x31F020c

/*
 * Macros used to configure Processing engine:
 * - IPBUF: Input buffer max and min threshold
 * - ITBUF: Input token max and min threshold
 * - OPBUF: Output buffer max and min threshold
 */
#define NSS_CRYPTO_EIP197_PE_IPBUF_MAX (0x9 << 12)
#define NSS_CRYPTO_EIP197_PE_IPBUF_MIN (0x5 << 8)
#define NSS_CRYPTO_EIP197_PE_ITBUF_MAX (0x7 << 12)
#define NSS_CRYPTO_EIP197_PE_ITBUF_MIN (0x5 << 8)
#define NSS_CRYPTO_EIP197_PE_OPBUF_MAX (0x8 << 4)
#define NSS_CRYPTO_EIP197_PE_OPBUF_MIN 0x7

#define NSS_CRYPTO_EIP197_INDATA_THR \
	(NSS_CRYPTO_EIP197_PE_IPBUF_MAX | NSS_CRYPTO_EIP197_PE_IPBUF_MIN)
#define NSS_CRYPTO_EIP197_INTOKEN_THR \
	(NSS_CRYPTO_EIP197_PE_ITBUF_MAX | NSS_CRYPTO_EIP197_PE_ITBUF_MIN)
#define NSS_CRYPTO_EIP197_OUTDATA_THR \
	(NSS_CRYPTO_EIP197_PE_OPBUF_MAX | NSS_CRYPTO_EIP197_PE_OPBUF_MIN)

/*
 * Maximum scratch pad ram words
 */
#define NSS_CRYPTO_EIP197_MAX_SCRATCH_RAM 0x1F

/*
 * Macros used for enabling EIP197 internal engines
 */
#define NSS_CRYPTO_EIP197_ENB_IPUE 0x1
#define NSS_CRYPTO_EIP197_ENB_IFPP 0x2
#define NSS_CRYPTO_EIP197_ENB_OPUE 0x1
#define NSS_CRYPTO_EIP197_ENB_OFPP 0x2

/*
 * These are debug configuration data as recommended by HW documentation
 * These are useful for reading the scratchpad RAM
 */
#define NSS_CRYPTO_EIP197_ENB_OFPP_DBG 0x570c008
#define NSS_CRYPTO_EIP197_ENB_OPUE_DBG 0x3F0c008
#define NSS_CRYPTO_EIP197_ENB_IFPP_DBG 0xBF0c008
#define NSS_CRYPTO_EIP197_ENB_IPUE_DBG 0x5F0c008

#define NSS_CRYPTO_EIP197_SIGNATURE 0x23235ca

/*
 * Transform Record Cache(TRC) configuration data
 * Flow Record Cache(FRC) configuration data
 */
#define NSS_CRYPTO_EIP197_MAX_FRC_HASH_BUCKETS 0x3c
#define NSS_CRYPTO_EIP197_MAX_TRC_HASH_BUCKETS 0x40
#define NSS_CRYPTO_EIP197_MAX_FLOW_REC 0x1b
#define NSS_CRYPTO_EIP197_MAX_TRANS_REC 0x1b
#define NSS_CRYPTO_EIP197_RST_FLOW_REC 0x1
#define NSS_CRYPTO_EIP197_ENB_FLOW_REC 0x1

#define NSS_CRYPTO_EIP197_RST_HASH_COL 0xfffff000
#define NSS_CRYPTO_EIP197_EMPTY_REC 0x3FF
#define NSS_CRYPTO_EIP197_FRC_FREECHAIN_TAIL ((NSS_CRYPTO_EIP197_MAX_FLOW_REC - 1) << 16)
#define NSS_CRYPTO_EIP197_FRC_FREECHAIN_HEAD 0x0
#define NSS_CRYPTO_EIP197_FRC_FREECHAIN_CFG \
	(NSS_CRYPTO_EIP197_FRC_FREECHAIN_TAIL | NSS_CRYPTO_EIP197_FRC_FREECHAIN_HEAD)
#define NSS_CRYPTO_EIP197_FLOW_REC_END (NSS_CRYPTO_EIP197_MAX_FLOW_REC * 16)
#define NSS_CRYPTO_EIP197_FRC_PARAMS2_DEFAULT 0x401c00
#define NSS_CRYPTO_EIP197_FRC_PARAMS2_CFG \
	(NSS_CRYPTO_EIP197_FRC_PARAMS2_DEFAULT | NSS_CRYPTO_EIP197_MAX_FLOW_REC)
#define NSS_CRYPTO_EIP197_FRC_PARAMS_DEFAULT 0x400
#define NSS_CRYPTO_EIP197_FRC_HASH_TABLE_SZ (0x1 << 6)
#define NSS_CRYPTO_EIP197_FRC_PARAMS_CFG \
	(NSS_CRYPTO_EIP197_FRC_PARAMS_DEFAULT | NSS_CRYPTO_EIP197_FRC_HASH_TABLE_SZ)

#define NSS_CRYPTO_EIP197_ENB_TRANS_REC 0x10
#define NSS_CRYPTO_EIP197_RST_TRANS_REC 0x1

#define NSS_CRYPTO_EIP197_TRC_FREECHAIN_TAIL ((NSS_CRYPTO_EIP197_MAX_TRANS_REC - 1) << 16)
#define NSS_CRYPTO_EIP197_TRC_FREECHAIN_HEAD 0x0
#define NSS_CRYPTO_EIP197_TRC_FREECHAIN_CFG \
	(NSS_CRYPTO_EIP197_TRC_FREECHAIN_TAIL | NSS_CRYPTO_EIP197_TRC_FREECHAIN_HEAD)
#define NSS_CRYPTO_EIP197_TRANS_REC_END	(NSS_CRYPTO_EIP197_MAX_TRANS_REC * 16)
#define NSS_CRYPTO_EIP197_TRC_PARAMS2_DEFAULT 0x1001c00
#define NSS_CRYPTO_EIP197_TRC_PARAMS2_CFG \
	(NSS_CRYPTO_EIP197_TRC_PARAMS2_DEFAULT | NSS_CRYPTO_EIP197_MAX_TRANS_REC)
#define NSS_CRYPTO_EIP197_TRC_PARAMS_DEFAULT 0x1400400
#define NSS_CRYPTO_EIP197_TRC_HASH_TABLE_SZ (0x1 << 5)
#define NSS_CRYPTO_EIP197_TRC_PARAMS_CFG \
	(NSS_CRYPTO_EIP197_TRC_PARAMS_DEFAULT | NSS_CRYPTO_EIP197_TRC_HASH_TABLE_SZ)

/*
 * HIA Interrupt Pending clear
 */
#define NSS_CRYPTO_HIA_IRQ_DISABLE 0x0
#define NSS_CRYPTO_HIA_IRQ_CLEAR 0xFFFFFFFF

/*
 * Initial Hash seed
 *
 * These values are provided by Inside Secure and is
 * used as an initial hash to compute the hash id.
 */
#define NSS_CRYPTO_EIP197_FHASH_IV0_CFG 0x28e1d20f
#define NSS_CRYPTO_EIP197_FHASH_IV1_CFG 0x30507ca5
#define NSS_CRYPTO_EIP197_FHASH_IV2_CFG 0x84484f1
#define NSS_CRYPTO_EIP197_FHASH_IV3_CFG 0xb8a5aeab

/*
 * Flow lookup config
 */
#define NSS_CRYPTO_EIP197_ENB_FLUE 0xc0000000
#define NSS_CRYPTO_EIP197_FLUE_OFFSET_CFG 0x400004

/*
 * EIP197 has a classification RAM area, this area is
 * used to write EIP197 FWs and boot up EIP197 internal
 * engines
 */
#define NSS_CRYPTO_EIP197_CS_RAM_START 0x60000

/*
 * HIA base register
 */
#define NSS_CRYPTO_EIP197_BASE 0x39880000

/*
 * Command Descriptor Ring and Result Descriptor Ring registers
 */
#define NSS_CRYPTO_EIP197_HIA_BASE 0x0
#define NSS_CRYPTO_EIP197_HIA_CDR_RING_BASE_ADDR_LO(i) (NSS_CRYPTO_EIP197_HIA_BASE + (0x1000 * i) + 0x0)
#define NSS_CRYPTO_EIP197_HIA_CDR_RING_BASE_ADDR_HI(i) (NSS_CRYPTO_EIP197_HIA_BASE + (0x1000 * i) + 0x4)
#define NSS_CRYPTO_EIP197_HIA_CDR_DATA_BASE_ADDR_LO(i) (NSS_CRYPTO_EIP197_HIA_BASE + (0x1000 * i) + 0x8)
#define NSS_CRYPTO_EIP197_HIA_CDR_DATA_BASE_ADDR_HI(i) (NSS_CRYPTO_EIP197_HIA_BASE + (0x1000 * i) + 0xC)
#define NSS_CRYPTO_EIP197_HIA_CDR_ATOK_BASE_ADDR_LO(i) (NSS_CRYPTO_EIP197_HIA_BASE + (0x1000 * i) + 0x10)
#define NSS_CRYPTO_EIP197_HIA_CDR_ATOK_BASE_ADDR_HI(i) (NSS_CRYPTO_EIP197_HIA_BASE + (0x1000 * i) + 0x14)
#define NSS_CRYPTO_EIP197_HIA_CDR_RING_SIZE(i) (NSS_CRYPTO_EIP197_HIA_BASE + (0x1000 * i) + 0x18)
#define NSS_CRYPTO_EIP197_HIA_CDR_DESC_SIZE(i) (NSS_CRYPTO_EIP197_HIA_BASE + (0x1000 * i) + 0x1C)
#define NSS_CRYPTO_EIP197_HIA_CDR_CFG(i) (NSS_CRYPTO_EIP197_HIA_BASE + (0x1000 * i) + 0x20)
#define NSS_CRYPTO_EIP197_HIA_CDR_DMA_CFG(i) (NSS_CRYPTO_EIP197_HIA_BASE + (0x1000 * i) + 0x24)
#define NSS_CRYPTO_EIP197_HIA_CDR_THRESH(i) (NSS_CRYPTO_EIP197_HIA_BASE + (0x1000 * i) + 0x28)
#define NSS_CRYPTO_EIP197_HIA_CDR_COUNT(i) (NSS_CRYPTO_EIP197_HIA_BASE + (0x1000 * i) + 0x2C)
#define NSS_CRYPTO_EIP197_HIA_CDR_PROC_COUNT(i) (NSS_CRYPTO_EIP197_HIA_BASE + (0x1000 * i) + 0x30)
#define NSS_CRYPTO_EIP197_HIA_CDR_PREP_PNTR(i) (NSS_CRYPTO_EIP197_HIA_BASE + (0x1000 * i) + 0x34)
#define NSS_CRYPTO_EIP197_HIA_CDR_PROC_PNTR(i) (NSS_CRYPTO_EIP197_HIA_BASE + (0x1000 * i) + 0x38)
#define NSS_CRYPTO_EIP197_HIA_CDR_STAT(i) (NSS_CRYPTO_EIP197_HIA_BASE + (0x1000 * i) + 0x3C)
#define NSS_CRYPTO_EIP197_HIA_CDR_OPTIONS(i) (NSS_CRYPTO_EIP197_HIA_BASE + (0x1000 * i) + 0x7F8)
#define NSS_CRYPTO_EIP197_HIA_CDR_VERSION(i) (NSS_CRYPTO_EIP197_HIA_BASE + (0x1000 * i) + 0x7FC)
#define NSS_CRYPTO_EIP197_HIA_RDR_RING_BASE_ADDR_LO(i) (NSS_CRYPTO_EIP197_HIA_BASE + (0x1000 * i) + 0x800)
#define NSS_CRYPTO_EIP197_HIA_RDR_RING_BASE_ADDR_HI(i) (NSS_CRYPTO_EIP197_HIA_BASE + (0x1000 * i) + 0x804)
#define NSS_CRYPTO_EIP197_HIA_RDR_DATA_BASE_ADDR_LO(i) (NSS_CRYPTO_EIP197_HIA_BASE + (0x1000 * i) + 0x808)
#define NSS_CRYPTO_EIP197_HIA_RDR_DATA_BASE_ADDR_HI(i) (NSS_CRYPTO_EIP197_HIA_BASE + (0x1000 * i) + 0x80C)
#define NSS_CRYPTO_EIP197_HIA_RDR_RING_SIZE(i) (NSS_CRYPTO_EIP197_HIA_BASE + (0x1000 * i) + 0x818)
#define NSS_CRYPTO_EIP197_HIA_RDR_DESC_SIZE(i) (NSS_CRYPTO_EIP197_HIA_BASE + (0x1000 * i) + 0x81C)
#define NSS_CRYPTO_EIP197_HIA_RDR_CFG(i) (NSS_CRYPTO_EIP197_HIA_BASE + (0x1000 * i) + 0x820)
#define NSS_CRYPTO_EIP197_HIA_RDR_DMA_CFG(i) (NSS_CRYPTO_EIP197_HIA_BASE + (0x1000 * i) + 0x824)
#define NSS_CRYPTO_EIP197_HIA_RDR_THRESH(i) (NSS_CRYPTO_EIP197_HIA_BASE + (0x1000 * i) + 0x828)
#define NSS_CRYPTO_EIP197_HIA_RDR_COUNT(i) (NSS_CRYPTO_EIP197_HIA_BASE + (0x1000 * i) + 0x82C)
#define NSS_CRYPTO_EIP197_HIA_RDR_PROC_COUNT(i) (NSS_CRYPTO_EIP197_HIA_BASE + (0x1000 * i) + 0x830)
#define NSS_CRYPTO_EIP197_HIA_RDR_PREP_PNTR(i) (NSS_CRYPTO_EIP197_HIA_BASE + (0x1000 * i) + 0x834)
#define NSS_CRYPTO_EIP197_HIA_RDR_PROC_PNTR(i) (NSS_CRYPTO_EIP197_HIA_BASE + (0x1000 * i) + 0x838)
#define NSS_CRYPTO_EIP197_HIA_RDR_STAT(i) (NSS_CRYPTO_EIP197_HIA_BASE + (0x1000 * i) + 0x83C)
#define NSS_CRYPTO_EIP197_HIA_RDR_OPTIONS(i) (NSS_CRYPTO_EIP197_HIA_BASE + (0x1000 * i) + 0xFF8)
#define NSS_CRYPTO_EIP197_HIA_RDR_VERSION(i) (NSS_CRYPTO_EIP197_HIA_BASE + (0x1000 * i) + 0xFFC)

/*
 * Data Fetch Engine registers
 */
#define NSS_CRYPTO_EIP197_HIA_DFE_CFG (NSS_CRYPTO_EIP197_HIA_BASE + 0xC000)
#define NSS_CRYPTO_EIP197_HIA_DFE_THR_CTRL (NSS_CRYPTO_EIP197_HIA_BASE + 0xC040)
#define NSS_CRYPTO_EIP197_HIA_DFE_THR_STAT (NSS_CRYPTO_EIP197_HIA_BASE + 0xC044)
#define NSS_CRYPTO_EIP197_HIA_DFE_THR_DESC_CTRL (NSS_CRYPTO_EIP197_HIA_BASE + 0xC048)
#define NSS_CRYPTO_EIP197_HIA_DFE_THR_DESC_DPTR_L (NSS_CRYPTO_EIP197_HIA_BASE + 0xC050)
#define NSS_CRYPTO_EIP197_HIA_DFE_THR_DESC_DPTR_H (NSS_CRYPTO_EIP197_HIA_BASE + 0xC054)
#define NSS_CRYPTO_EIP197_HIA_DFE_THR_DESC_ACDPTR_L (NSS_CRYPTO_EIP197_HIA_BASE + 0xC058)
#define NSS_CRYPTO_EIP197_HIA_DFE_THR_DESC_ACDPTR_H (NSS_CRYPTO_EIP197_HIA_BASE + 0xC05C)
#define NSS_CRYPTO_EIP197_HIA_DFE_OPTION (NSS_CRYPTO_EIP197_HIA_BASE + 0xC078)
#define NSS_CRYPTO_EIP197_HIA_DFE_VERSION (NSS_CRYPTO_EIP197_HIA_BASE + 0xC07C)

/*
 * Data Store Engine registers
 */
#define NSS_CRYPTO_EIP197_HIA_DSE_CFG (NSS_CRYPTO_EIP197_HIA_BASE + 0xD000)
#define NSS_CRYPTO_EIP197_HIA_DSE_THR_CTRL (NSS_CRYPTO_EIP197_HIA_BASE + 0xD040)
#define NSS_CRYPTO_EIP197_HIA_DSE_THR_STAT (NSS_CRYPTO_EIP197_HIA_BASE + 0xD044)
#define NSS_CRYPTO_EIP197_HIA_DSE_THR_DESC_CTRL (NSS_CRYPTO_EIP197_HIA_BASE + 0xD048)
#define NSS_CRYPTO_EIP197_HIA_DSE_OPTION (NSS_CRYPTO_EIP197_HIA_BASE + 0xD078)
#define NSS_CRYPTO_EIP197_HIA_DSE_VERSION (NSS_CRYPTO_EIP197_HIA_BASE + 0xD07C)

/*
 * Ring arbiter registers
 */
#define NSS_CRYPTO_EIP197_HIA_RA_AIC_BASE 0x10000
#define NSS_CRYPTO_EIP197_HIA_RA_PRIO0 (NSS_CRYPTO_EIP197_HIA_RA_AIC_BASE + 0x0)
#define NSS_CRYPTO_EIP197_HIA_RA_PRIO1 (NSS_CRYPTO_EIP197_HIA_RA_AIC_BASE + 0x4)
#define NSS_CRYPTO_EIP197_HIA_RA_PRIO2 (NSS_CRYPTO_EIP197_HIA_RA_AIC_BASE + 0x8)
#define NSS_CRYPTO_EIP197_HIA_RA_PE_CTRL (NSS_CRYPTO_EIP197_HIA_RA_AIC_BASE + 0x10)
#define NSS_CRYPTO_EIP197_HIA_RA_PE_STAT (NSS_CRYPTO_EIP197_HIA_RA_AIC_BASE + 0x14)

#define NSS_CRYPTO_EIP197_HIA_AIC_G_ENABLE_CTRL (NSS_CRYPTO_EIP197_HIA_RA_AIC_BASE + 0xF808)
#define NSS_CRYPTO_EIP197_HIA_AIC_G_ACK (NSS_CRYPTO_EIP197_HIA_RA_AIC_BASE + 0xF810)

#define NSS_CRYPTO_EIP197_HIA_AIC_R0_ENABLE_CTRL (NSS_CRYPTO_EIP197_HIA_RA_AIC_BASE + 0xE808)
#define NSS_CRYPTO_EIP197_HIA_AIC_R1_ENABLE_CTRL (NSS_CRYPTO_EIP197_HIA_RA_AIC_BASE + 0xD808)
#define NSS_CRYPTO_EIP197_HIA_AIC_R2_ENABLE_CTRL (NSS_CRYPTO_EIP197_HIA_RA_AIC_BASE + 0xC808)
#define NSS_CRYPTO_EIP197_HIA_AIC_R3_ENABLE_CTRL (NSS_CRYPTO_EIP197_HIA_RA_AIC_BASE + 0xB808)

#define NSS_CRYPTO_EIP197_HIA_AIC_R0_ACK (NSS_CRYPTO_EIP197_HIA_RA_AIC_BASE + 0xE810)
#define NSS_CRYPTO_EIP197_HIA_AIC_R1_ACK (NSS_CRYPTO_EIP197_HIA_RA_AIC_BASE + 0xD810)
#define NSS_CRYPTO_EIP197_HIA_AIC_R2_ACK (NSS_CRYPTO_EIP197_HIA_RA_AIC_BASE + 0xC810)
#define NSS_CRYPTO_EIP197_HIA_AIC_R3_ACK (NSS_CRYPTO_EIP197_HIA_RA_AIC_BASE + 0xB810)

#define NSS_CRYPTO_EIP197_HIA_LASIDE_BASE_ADDR_LO (NSS_CRYPTO_EIP197_HIA_RA_AIC_BASE + 0xFF00)
#define NSS_CRYPTO_EIP197_HIA_LASIDE_BASE_ADDR_HI (NSS_CRYPTO_EIP197_HIA_RA_AIC_BASE + 0xFF04)
#define NSS_CRYPTO_EIP197_HIA_LASIDE_SLAVE_CTRL0 (NSS_CRYPTO_EIP197_HIA_RA_AIC_BASE + 0xFF08)
#define NSS_CRYPTO_EIP197_HIA_LASIDE_MASTER_CTRL1 (NSS_CRYPTO_EIP197_HIA_RA_AIC_BASE + 0xFF0C)
#define NSS_CRYPTO_EIP197_HIA_INLINE_CTRL0 (NSS_CRYPTO_EIP197_HIA_RA_AIC_BASE + 0xFF80)
#define NSS_CRYPTO_EIP197_HIA_MST_TIMEOUT_ERR (NSS_CRYPTO_EIP197_HIA_RA_AIC_BASE + 0xFFD0)
#define NSS_CRYPTO_EIP197_HIA_OPTIONS2 (NSS_CRYPTO_EIP197_HIA_RA_AIC_BASE + 0xFFF0)
#define NSS_CRYPTO_EIP197_HIA_MST_CTRL (NSS_CRYPTO_EIP197_HIA_RA_AIC_BASE + 0xFFF4)

/*
 * Processing engine registers
 */
#define NSS_CRYPTO_EIP197_PE_BASE 0x20000
#define NSS_CRYPTO_EIP197_PE_IN_DBUF_THR (NSS_CRYPTO_EIP197_PE_BASE + 0x0)
#define NSS_CRYPTO_EIP197_PE_IN_TBUF_THR (NSS_CRYPTO_EIP197_PE_BASE + 0x100)
#define NSS_CRYPTO_EIP197_PE_MID_DBUF_THR (NSS_CRYPTO_EIP197_PE_BASE + 0x400)
#define NSS_CRYPTO_EIP197_PE_MID_TBUF_THR (NSS_CRYPTO_EIP197_PE_BASE + 0x500)

#define NSS_CRYPTO_EIP197_PE_ICE_SCRATCH_RAM (NSS_CRYPTO_EIP197_PE_BASE + 0x800)
#define NSS_CRYPTO_EIP197_ICE_IPUE_VERSION_REG (NSS_CRYPTO_EIP197_PE_ICE_SCRATCH_RAM)
#define NSS_CRYPTO_EIP197_ICE_IFPP_VERSION_REG (NSS_CRYPTO_EIP197_PE_ICE_SCRATCH_RAM + 0x8)
#define NSS_CRYPTO_EIP197_ICE_IPUE_CTRL_REG (NSS_CRYPTO_EIP197_PE_ICE_SCRATCH_RAM + 0x14)
#define NSS_CRYPTO_EIP197_ICE_IFPP_CTRL_REG (NSS_CRYPTO_EIP197_PE_ICE_SCRATCH_RAM + 0x18)
#define NSS_CRYPTO_EIP197_METADATA_EN_OFFSET (NSS_CRYPTO_EIP197_PE_ICE_SCRATCH_RAM + 0x60)

#define NSS_CRYPTO_EIP197_PE_ICE_ADAPT_CTRL (NSS_CRYPTO_EIP197_PE_BASE + 0xC00)
#define NSS_CRYPTO_EIP197_PE_ICE_PUE_CTRL (NSS_CRYPTO_EIP197_PE_BASE + 0xC80)
#define NSS_CRYPTO_EIP197_PE_ICE_PUE_DBG (NSS_CRYPTO_EIP197_PE_BASE + 0xC84)
#define NSS_CRYPTO_EIP197_PE_ICE_PUE_ECC_TEST (NSS_CRYPTO_EIP197_PE_BASE + 0xC88)
#define NSS_CRYPTO_EIP197_PE_ICE_PUTF_CTRL (NSS_CRYPTO_EIP197_PE_BASE + 0xD00)
#define NSS_CRYPTO_EIP197_PE_ICE_SCRATCH_CTRL (NSS_CRYPTO_EIP197_PE_BASE + 0xD04)
#define NSS_CRYPTO_EIP197_PE_ICE_TIMER_LO (NSS_CRYPTO_EIP197_PE_BASE + 0xD08)
#define NSS_CRYPTO_EIP197_PE_ICE_TIMER_HI (NSS_CRYPTO_EIP197_PE_BASE + 0xD0c)
#define NSS_CRYPTO_EIP197_PE_ICE_UENG_STAT (NSS_CRYPTO_EIP197_PE_BASE + 0xD10)
#define NSS_CRYPTO_EIP197_PE_ICE_FPP_CTRL (NSS_CRYPTO_EIP197_PE_BASE + 0xD80)
#define NSS_CRYPTO_EIP197_PE_ICE_FPP_DBG (NSS_CRYPTO_EIP197_PE_BASE + 0xD84)
#define NSS_CRYPTO_EIP197_PE_ICE_FPP_ECC_TEST (NSS_CRYPTO_EIP197_PE_BASE + 0xD88)
#define NSS_CRYPTO_EIP197_PE_ICE_PPTF_CTRL (NSS_CRYPTO_EIP197_PE_BASE + 0xE00)
#define NSS_CRYPTO_EIP197_PE_ICE_RAM_CTRL (NSS_CRYPTO_EIP197_PE_BASE + 0xFF0)
#define NSS_CRYPTO_EIP197_PE_ICE_OPTIONS (NSS_CRYPTO_EIP197_PE_BASE + 0xFF8)
#define NSS_CRYPTO_EIP197_PE_ICE_VERSION (NSS_CRYPTO_EIP197_PE_BASE + 0xFFC)

/*
 * Context Registers
 */
#define NSS_CRYPTO_EIP197_PE_EIP96_BASE 0x21000
#define NSS_CRYPTO_EIP197_PE_EIP96_TOKEN_CTRL (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x0)
#define NSS_CRYPTO_EIP197_PE_EIP96_FUNC_EN (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x4)
#define NSS_CRYPTO_EIP197_PE_EIP96_CONTEXT_CTRL (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x8)
#define NSS_CRYPTO_EIP197_PE_EIP96_CONTEXT_STAT (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0xC)
#define NSS_CRYPTO_EIP197_PE_EIP96_OUT_BUF_CTRL (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x1C)
#define NSS_CRYPTO_EIP197_PE_EIP96_PRNG_STAT (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x40)
#define NSS_CRYPTO_EIP197_PE_EIP96_PRNG_CTRL (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x44)
#define NSS_CRYPTO_EIP197_PE_EIP96_PRNG_SEED_LO (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x48)
#define NSS_CRYPTO_EIP197_PE_EIP96_PRNG_SEED_HI (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x4C)
#define NSS_CRYPTO_EIP197_PE_EIP96_PRNG_KEY0_LO (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x50)
#define NSS_CRYPTO_EIP197_PE_EIP96_PRNG_KEY0_HI (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x54)
#define NSS_CRYPTO_EIP197_PE_EIP96_PRNG_KEY1_LO (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x58)
#define NSS_CRYPTO_EIP197_PE_EIP96_PRNG_KEY1_HI (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x5C)
#define NSS_CRYPTO_EIP197_PE_EIP96_PRNG_RES(i) (NSS_CRYPTO_EIP197_PE_EIP96_BASE + (0x60 + (i << 2)))
#define NSS_CRYPTO_EIP197_PE_EIP96_LFSR_LO (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x70)
#define NSS_CRYPTO_EIP197_PE_EIP96_LFSR_HI (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x74)
#define NSS_CRYPTO_EIP197_PE_EIP96_VERSION (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x3FC)

#define NSS_CRYPTO_EIP197_PE_IV0 (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x210)
#define NSS_CRYPTO_EIP197_PE_IV1 (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x214)
#define NSS_CRYPTO_EIP197_PE_IV2 (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x218)
#define NSS_CRYPTO_EIP197_PE_IV3 (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x21C)

/*
 * Cipher Keys and digest are only available in debug mode
 *
 * Note: We will need to add this flag in Makefile to make use of it.
 */
#if defined(NSS_CRYPTO_DEBUG_KEYS)
#define NSS_CRYPTO_EIP197_PE_KEY0 (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x220)
#define NSS_CRYPTO_EIP197_PE_KEY1 (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x224)
#define NSS_CRYPTO_EIP197_PE_KEY2 (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x228)
#define NSS_CRYPTO_EIP197_PE_KEY3 (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x22C)
#define NSS_CRYPTO_EIP197_PE_KEY4 (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x230)
#define NSS_CRYPTO_EIP197_PE_KEY5 (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x234)
#define NSS_CRYPTO_EIP197_PE_KEY6 (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x238)
#define NSS_CRYPTO_EIP197_PE_KEY7 (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x23C)

#define NSS_CRYPTO_EIP197_PE_IDIGEST0 (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x240)
#define NSS_CRYPTO_EIP197_PE_IDIGEST1 (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x244)
#define NSS_CRYPTO_EIP197_PE_IDIGEST2 (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x248)
#define NSS_CRYPTO_EIP197_PE_IDIGEST3 (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x24C)
#define NSS_CRYPTO_EIP197_PE_IDIGEST4 (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x250)
#define NSS_CRYPTO_EIP197_PE_IDIGEST5 (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x254)
#define NSS_CRYPTO_EIP197_PE_IDIGEST6 (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x258)
#define NSS_CRYPTO_EIP197_PE_IDIGEST7 (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x25C)
#define NSS_CRYPTO_EIP197_PE_ODIGEST0 (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x260)
#define NSS_CRYPTO_EIP197_PE_ODIGEST1 (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x264)
#define NSS_CRYPTO_EIP197_PE_ODIGEST2 (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x268)
#define NSS_CRYPTO_EIP197_PE_ODIGEST3 (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x26C)
#define NSS_CRYPTO_EIP197_PE_ODIGEST4 (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x270)
#define NSS_CRYPTO_EIP197_PE_ODIGEST5 (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x274)
#define NSS_CRYPTO_EIP197_PE_ODIGEST6 (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x278)
#define NSS_CRYPTO_EIP197_PE_ODIGEST7 (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x27C)
#endif

/*
 * Output classification engine registers
 */
#define NSS_CRYPTO_EIP197_PE_OCE_SCRATCH_RAM (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x400)
#define NSS_CRYPTO_EIP197_OCE_OFPP_CTRL_REG (NSS_CRYPTO_EIP197_PE_OCE_SCRATCH_RAM + 0x18)
#define NSS_CRYPTO_EIP197_OCE_OFPP_VERSION_REG (NSS_CRYPTO_EIP197_PE_OCE_SCRATCH_RAM + 0x8)
#define NSS_CRYPTO_EIP197_OCE_OPUE_CTRL_REG (NSS_CRYPTO_EIP197_PE_OCE_SCRATCH_RAM + 0x14)
#define NSS_CRYPTO_EIP197_OCE_OPUE_VERSION_REG (NSS_CRYPTO_EIP197_PE_OCE_SCRATCH_RAM)

#define NSS_CRYPTO_EIP197_PE_OCE_ADAPT_CTRL (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x800)
#define NSS_CRYPTO_EIP197_PE_OCE_PUE_CTRL (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x880)
#define NSS_CRYPTO_EIP197_PE_OCE_PUE_DBG (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x884)
#define NSS_CRYPTO_EIP197_PE_OCE_PUTF_CTRL (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x900)
#define NSS_CRYPTO_EIP197_PE_OCE_SCRATCH_CTRL (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x904)
#define NSS_CRYPTO_EIP197_PE_OCE_TIMER_LO (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x908)
#define NSS_CRYPTO_EIP197_PE_OCE_TIMER_HI (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x90c)
#define NSS_CRYPTO_EIP197_PE_OCE_FPP_CTRL (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x980)
#define NSS_CRYPTO_EIP197_PE_OCE_FPP_DBG (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0x984)
#define NSS_CRYPTO_EIP197_PE_OCE_PPTF_CTRL (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0xA00)
#define NSS_CRYPTO_EIP197_PE_OCE_RAM_CTRL (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0xBF0)
#define NSS_CRYPTO_EIP197_PE_OCE_OPTIONS (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0xBF8)
#define NSS_CRYPTO_EIP197_PE_OCE_VERSION (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0xBFC)

#define NSS_CRYPTO_EIP197_PE_OUT_DBUF_THRES (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0xC00)
#define NSS_CRYPTO_EIP197_PE_OUT_TBUF_THRES (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0xD00)
#define NSS_CRYPTO_EIP197_PE_PSE_TOKEN_CTRL_STAT (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0xE00)
#define NSS_CRYPTO_EIP197_PE_PSE_FUNC_EN (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0xE04)
#define NSS_CRYPTO_EIP197_PE_PSE_CONTEXT_CTRL (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0xE08)
#define NSS_CRYPTO_EIP197_PE_PSE_CONTEXT_STAT (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0xE0C)
#define NSS_CRYPTO_EIP197_PE_PSE_NXT_ACT_TOKEN_VAL (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0xE10)
#define NSS_CRYPTO_EIP197_PE_PSE_OUT_TRANS_CTRL_STAT (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0xE18)
#define NSS_CRYPTO_EIP197_PE_PSE_OUT_BUF_CTRL (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0xE1C)
#define NSS_CRYPTO_EIP197_PE_PSE_OPTIONS (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0xEF8)
#define NSS_CRYPTO_EIP197_PE_PSE_VERSION (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0xEFC)
#define NSS_CRYPTO_EIP197_PE_PE_INFLIGHT (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0xFF0)
#define NSS_CRYPTO_EIP197_PE_PE_DEBUG (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0xFF4)
#define NSS_CRYPTO_EIP197_PE_PE_OPTIONS (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0xFF8)
#define NSS_CRYPTO_EIP197_PE_PE_VERSION (NSS_CRYPTO_EIP197_PE_EIP96_BASE + 0xFFC)

/*
 * Flow record cache registers
 */
#define NSS_CRYPTO_EIP197_FRC_BASE 0x70000
#define NSS_CRYPTO_EIP197_FRC_CTRL (NSS_CRYPTO_EIP197_FRC_BASE + 0x0)
#define NSS_CRYPTO_EIP197_FRC_LASTRES (NSS_CRYPTO_EIP197_FRC_BASE + 0x4)
#define NSS_CRYPTO_EIP197_FRC_REGINDEX (NSS_CRYPTO_EIP197_FRC_BASE + 0x8)
#define NSS_CRYPTO_EIP197_FRC_PARAMS (NSS_CRYPTO_EIP197_FRC_BASE + 0x20)
#define NSS_CRYPTO_EIP197_FRC_FREECHAIN (NSS_CRYPTO_EIP197_FRC_BASE + 0x24)
#define NSS_CRYPTO_EIP197_FRC_PARAMS2 (NSS_CRYPTO_EIP197_FRC_BASE + 0x28)
#define NSS_CRYPTO_EIP197_FRC_ECCCTRL (NSS_CRYPTO_EIP197_FRC_BASE + 0x30)

/*
 * Transform record cache registers
 */
#define NSS_CRYPTO_EIP197_TRC_BASE 0x70800
#define NSS_CRYPTO_EIP197_TRC_CTRL (NSS_CRYPTO_EIP197_TRC_BASE + 0x0)
#define NSS_CRYPTO_EIP197_TRC_LASTRES (NSS_CRYPTO_EIP197_TRC_BASE + 0x4)
#define NSS_CRYPTO_EIP197_TRC_REGINDEX (NSS_CRYPTO_EIP197_TRC_BASE + 0x8)
#define NSS_CRYPTO_EIP197_TRC_PARAMS (NSS_CRYPTO_EIP197_TRC_BASE + 0x20)
#define NSS_CRYPTO_EIP197_TRC_FREECHAIN (NSS_CRYPTO_EIP197_TRC_BASE + 0x24)
#define NSS_CRYPTO_EIP197_TRC_PARAMS2 (NSS_CRYPTO_EIP197_TRC_BASE + 0x28)
#define NSS_CRYPTO_EIP197_TRC_ECCCTRL (NSS_CRYPTO_EIP197_TRC_BASE + 0x30)
#define NSS_CRYPTO_EIP197_TRC_ECCSTAT (NSS_CRYPTO_EIP197_TRC_BASE + 0x34)

/*
 * Flow lookup engine registers
 */
#define NSS_CRYPTO_EIP197_FLUE_BASE 0x76000
#define NSS_CRYPTO_EIP197_FLUE_CACHEBASE_LO(i) (NSS_CRYPTO_EIP197_FLUE_BASE + (i * 0x20) + 0x0)
#define NSS_CRYPTO_EIP197_FLUE_CACHEBASE_HI(i) (NSS_CRYPTO_EIP197_FLUE_BASE + (i * 0x20) + 0x4)
#define NSS_CRYPTO_EIP197_FLUE_HASHBASE_LO(i) (NSS_CRYPTO_EIP197_FLUE_BASE + (i * 0x20) + 0x8)
#define NSS_CRYPTO_EIP197_FLUE_HASHBASE_HI(i) (NSS_CRYPTO_EIP197_FLUE_BASE + (i * 0x20) + 0xC)
#define NSS_CRYPTO_EIP197_FLUE_CONFIG(i) (NSS_CRYPTO_EIP197_FLUE_BASE + (i * 0x20) + 0x10)
#define NSS_CRYPTO_EIP197_FLUE_OFFSET (NSS_CRYPTO_EIP197_FLUE_BASE + 0x808)
#define NSS_CRYPTO_EIP197_FLUE_IFC_LUT0 (NSS_CRYPTO_EIP197_FLUE_BASE + 0x820)
#define NSS_CRYPTO_EIP197_FLUE_IFC_LUT1 (NSS_CRYPTO_EIP197_FLUE_BASE + 0x824)
#define NSS_CRYPTO_EIP197_FLUE_IFC_LUT2 (NSS_CRYPTO_EIP197_FLUE_BASE + 0x828)
#define NSS_CRYPTO_EIP197_FHASH_IV0 (NSS_CRYPTO_EIP197_FLUE_BASE + 0x8C0)
#define NSS_CRYPTO_EIP197_FHASH_IV1 (NSS_CRYPTO_EIP197_FLUE_BASE + 0x8C4)
#define NSS_CRYPTO_EIP197_FHASH_IV2 (NSS_CRYPTO_EIP197_FLUE_BASE + 0x8C8)
#define NSS_CRYPTO_EIP197_FHASH_IV3 (NSS_CRYPTO_EIP197_FLUE_BASE + 0x8CC)

/*
 * Classification registers
 */
#define NSS_CRYPTO_EIP197_CS_RAM_CTRL 0x77FF0
#define NSS_CRYPTO_EIP197_CS_OPTIONS 0x77FF8
#define NSS_CRYPTO_EIP197_CS_VERSION 0x77FFC

/*
 * Debug and clock registers
 */
#define NSS_CRYPTO_EIP197_DEBUG_BASE 0x7F000
#define NSS_CRYPTO_EIP197_CLK_STATE (NSS_CRYPTO_EIP197_DEBUG_BASE + 0xFE4)
#define NSS_CRYPTO_EIP197_FORCE_CLOCK_ON (NSS_CRYPTO_EIP197_DEBUG_BASE + 0xFE8)
#define NSS_CRYPTO_EIP197_FORCE_CLOCK_OFF (NSS_CRYPTO_EIP197_DEBUG_BASE + 0xFEC)
#define NSS_CRYPTO_EIP197_MST_CTRL (NSS_CRYPTO_EIP197_DEBUG_BASE + 0XFF4)
#define NSS_CRYPTO_EIP197_OPTION (NSS_CRYPTO_EIP197_DEBUG_BASE + 0xFF8)
#define NSS_CRYPTO_EIP197_VERSION (NSS_CRYPTO_EIP197_DEBUG_BASE + 0xFFC)

/*
 * Context Field cipher algorithm
 */
#define NSS_CRYPTO_EIP197_CTX_ALGO_DES 0x0
#define NSS_CRYPTO_EIP197_CTX_ALGO_3DES (0x2 << 17)
#define NSS_CRYPTO_EIP197_CTX_ALGO_AES128 (0x5 << 17)
#define NSS_CRYPTO_EIP197_CTX_ALGO_AES192 (0x6 << 17)
#define NSS_CRYPTO_EIP197_CTX_ALGO_AES256 (0x7 << 17)

/*
 * Context Field auth algorithm
 */
#define NSS_CRYPTO_EIP197_CTX_ALGO_MD5 0x0
#define NSS_CRYPTO_EIP197_CTX_ALGO_SHA1 (0x2 << 23)
#define NSS_CRYPTO_EIP197_CTX_ALGO_SHA256 (0x3 << 23)
#define NSS_CRYPTO_EIP197_CTX_ALGO_SHA224 (0x4 << 23)
#define NSS_CRYPTO_EIP197_CTX_ALGO_SHA512 (0x5 << 23)
#define NSS_CRYPTO_EIP197_CTX_ALGO_SHA384 (0x6 << 23)
#define NSS_CRYPTO_EIP197_CTX_ALGO_GHASH  (0x4 << 23)

/*
 * Context Field digest type
 */
#define NSS_CRYPTO_EIP197_CTX_AUTH_MODE_HASH (0x1 << 21)
#define NSS_CRYPTO_EIP197_CTX_AUTH_MODE_GMAC (0x2 << 21)
#define NSS_CRYPTO_EIP197_CTX_AUTH_MODE_HMAC (0x3 << 21)

/*
 * Context field enable key
 */
#define NSS_CRYPTO_EIP197_CTX_WITH_KEY (0x1 << 16)

/*
 * Number of context control words
 */
#define NSS_CRYPTO_EIP197_MAX_CTRL 2

/*
 * Context Mode
 */
#define NSS_CRYPTO_EIP197_CTX_CIPHER_MODE_ECB 0x0
#define NSS_CRYPTO_EIP197_CTX_CIPHER_MODE_CBC 0x1
#define NSS_CRYPTO_EIP197_CTX_CIPHER_MODE_CTR 0x2
#define NSS_CRYPTO_EIP197_CTX_CIPHER_MODE_GCM ((0x1 << 17) | 0x2)

/*
 * descriptor fields
 */
#define NSS_CRYPTO_EIP197_DESC_FRAGS_MAX 4
#define NSS_CRYPTO_EIP197_DESC_TOKEN_MAX 8
#define NSS_CRYPTO_EIP197_DESC_BYPASS_MAX 4

#define NSS_CRYPTO_EIP197_CTX_SIZE_4WORDS (0x4 << 8)
#define NSS_CRYPTO_EIP197_CTX_SIZE_6WORDS (0x6 << 8)
#define NSS_CRYPTO_EIP197_CTX_SIZE_7WORDS (0x7 << 8)
#define NSS_CRYPTO_EIP197_CTX_SIZE_8WORDS (0x8 << 8)
#define NSS_CRYPTO_EIP197_CTX_SIZE_9WORDS (0x9 << 8)
#define NSS_CRYPTO_EIP197_CTX_SIZE_10WORDS (0xA << 8)
#define NSS_CRYPTO_EIP197_CTX_SIZE_11WORDS (0xB << 8)
#define NSS_CRYPTO_EIP197_CTX_SIZE_12WORDS (0xC << 8)
#define NSS_CRYPTO_EIP197_CTX_SIZE_14WORDS (0xE << 8)
#define NSS_CRYPTO_EIP197_CTX_SIZE_16WORDS (0x10 << 8)
#define NSS_CRYPTO_EIP197_CTX_SIZE_18WORDS (0x12 << 8)
#define NSS_CRYPTO_EIP197_CTX_SIZE_19WORDS (0x13 << 8)
#define NSS_CRYPTO_EIP197_CTX_SIZE_20WORDS (0x14 << 8)
#define NSS_CRYPTO_EIP197_CTX_SIZE_22WORDS (0x16 << 8)
#define NSS_CRYPTO_EIP197_CTX_SIZE_24WORDS (0x18 << 8)
#define NSS_CRYPTO_EIP197_CTX_SIZE_25WORDS (0x19 << 8)
#define NSS_CRYPTO_EIP197_CTX_SIZE_26WORDS (0x1A << 8)
#define NSS_CRYPTO_EIP197_CTX_SIZE_32WORDS (0x20 << 8)
#define NSS_CRYPTO_EIP197_CTX_SIZE_36WORDS (0x24 << 8)
#define NSS_CRYPTO_EIP197_CTX_SIZE_38WORDS (0x26 << 8)
#define NSS_CRYPTO_EIP197_CTX_SIZE_40WORDS (0x28 << 8)

/*
 * nss_crypto_eip197_desc
 *	HW descriptors
 */
struct nss_crypto_eip197_desc {
	uint32_t frag_data[NSS_CRYPTO_EIP197_DESC_FRAGS_MAX];
	uint32_t token_data[NSS_CRYPTO_EIP197_DESC_TOKEN_MAX];
	uint32_t bypass_data[NSS_CRYPTO_EIP197_DESC_BYPASS_MAX];
};

extern void nss_crypto_eip197_hw_init(struct platform_device *pdev, struct device_node *np, void __iomem *addr);
extern ssize_t nss_crypto_eip197_read_dma_reg(struct file *filep, char __user *buffer, size_t count, loff_t *ppos);
extern ssize_t nss_crypto_eip197_read_hia_reg(struct file *filep, char __user *buffer, size_t count, loff_t *ppos);
extern ssize_t nss_crypto_eip197_read_pe_reg(struct file *filep, char __user *buffer, size_t count, loff_t *ppos);

extern int nss_crypto_eip197_init(struct platform_device *pdev);
#endif /* __NSS_CRYPTO_EIP197_H */
