From 48a032feb89398201749bbb715a0434006119022 Mon Sep 17 00:00:00 2001
From: Sriram R <srirrama@codeaurora.org>
Date: Tue, 15 Sep 2020 12:37:37 +0530
Subject: [PATCH] sigma-dut: Add 6GHz AP Support

Add 6GHz AP Support in sigma dut.
Added support for below commands,
 1. ChnlFreq
 2. Band6Gonly
 3. UnsolicitedProbeResp

Added 6G specific hostapd conf(default fils timeout,
opclass, and corresponding seg0 idx)

Added support for ltf/gi 6G commands

Signed-off-by: Sriram R <srirrama@codeaurora.org>
---
 ap.c        | 104 ++++++++++++++++++++++++++++++++++++++++++++++++++++++------
 sigma_dut.h |   5 +++
 2 files changed, 100 insertions(+), 9 deletions(-)

--- a/ap.c
+++ b/ap.c
@@ -694,10 +694,14 @@ static enum sigma_cmd_result cmd_ap_set_
 	if (val) {
 		if (strcasecmp(val, "5G") == 0)
 			dut->ap_interface_5g = 1;
+		else if (strcasecmp(val, "6G") == 0)
+			dut->ap_interface_6g = 1;
 		else
 			dut->ap_interface_2g = 1;
 
-		if (dut->ap_interface_5g && dut->ap_interface_2g)
+		if ((dut->ap_interface_5g && dut->ap_interface_2g) ||
+		    (dut->ap_interface_2g && dut->ap_interface_6g) ||
+		    (dut->ap_interface_6g && dut->ap_interface_5g))
 			dut->ap_is_dual = 1;
 	}
 
@@ -750,6 +754,23 @@ static enum sigma_cmd_result cmd_ap_set_
 		}
 	}
 
+	/* ChnlFreq param is used only for 6G interface */
+	val = get_param(cmd, "ChnlFreq");
+	if (val)
+		dut->use_6g = 1;
+
+	val = get_param(cmd, "Band6Gonly");
+	if (val)
+		dut->ap_6g_only = 1;
+
+	val = get_param(cmd, "UnsolicitedProbeResp");
+	if (val) {
+		if (strcasecmp(val, "enable") == 0)
+			dut->ap_6g_unsol_prb_resp = 1;
+		else
+			dut->ap_6g_unsol_prb_resp = 0;
+	}
+
 	val = get_param(cmd, "CHANNEL");
 	if (val) {
 		const char *pos;
@@ -797,7 +818,7 @@ static enum sigma_cmd_result cmd_ap_set_
 			free(str);
 			return STATUS_SENT;
 		}
-		if ((dut->ap_mode == AP_11ac || (dut->ap_mode == AP_11ax && dut->use_5g))
+		if ((dut->ap_mode == AP_11ac || (dut->ap_mode == AP_11ax && (dut->use_5g || dut->use_6g)))
 		     && dut->ap_80plus80 != 1)
 			dut->ap_chwidth = AP_80;
 
@@ -809,14 +830,16 @@ static enum sigma_cmd_result cmd_ap_set_
 				free(str);
 				return STATUS_SENT;
 			}
-			if (dut->ap_mode_1 == AP_11ac || (dut->ap_mode == AP_11ax && dut->use_5g))
+			if (dut->ap_mode_1 == AP_11ac || (dut->ap_mode == AP_11ax && (dut->use_5g || dut->use_6g)))
 				dut->ap_chwidth_1 = AP_80;
 			dut->ap_is_dual = 1;
 		}
 
 		free(str);
 	} else if (dut->ap_mode == AP_inval) {
-		if (dut->ap_channel <= 11)
+		if (dut->use_6g)
+			dut->ap_mode = AP_11ax;
+		else if (dut->ap_channel <= 11)
 			dut->ap_mode = AP_11ng;
 		else if (dut->program == PROGRAM_VHT)
 			dut->ap_mode = AP_11ac;
@@ -844,6 +867,9 @@ static enum sigma_cmd_result cmd_ap_set_
 		dut->use_5g = 1;
 		break;
 	case AP_11ax:
+		if (dut->use_6g)
+			break;
+
 		if (dut->ap_channel >= 1 && dut->ap_channel <= 14)
 			dut->use_5g = 0;
 		else if (dut->ap_channel >= 36 && dut->ap_channel <= 171)
@@ -7560,6 +7586,13 @@ static int get_5g_channel_freq(int chan)
 	return 5000 + chan * 5;
 }
 
+static int get_6g_seg0_idx(int chan, int bw)
+{
+	int period;
+
+	period = chan / (bw / 5);
+	return 1 + (period * (bw / 5)) + (bw - 20) / 10;
+}
 
 static const char * hostapd_cipher_name(enum ap_cipher cipher)
 {
@@ -7925,7 +7958,7 @@ enum sigma_cmd_result cmd_ap_config_comm
 		fprintf(f, "hw_mode=ad\n");
 		break;
 	case AP_11ax:
-		if (dut->use_5g)
+		if (dut->use_6g || dut->use_5g)
 			fprintf(f, "hw_mode=a\n");
 		else
 			fprintf(f, "hw_mode=g\n");
@@ -7941,7 +7974,7 @@ enum sigma_cmd_result cmd_ap_config_comm
 	if ((drv == DRIVER_MAC80211 || drv == DRIVER_QNXNTO ||
 	     drv == DRIVER_LINUX_WCN) &&
 	    (dut->ap_mode == AP_11ng || dut->ap_mode == AP_11na ||
-	     (dut->ap_mode == AP_11ax && !dut->use_5g))) {
+	     (dut->ap_mode == AP_11ax && !(dut->use_5g || dut->use_6g)))) {
 		int ht40plus = 0, ht40minus = 0;
 		char ht_caps[60];
 		int len = 0;
@@ -8022,7 +8055,7 @@ enum sigma_cmd_result cmd_ap_config_comm
 	if ((drv == DRIVER_MAC80211 || drv == DRIVER_QNXNTO ||
 	     drv == DRIVER_LINUX_WCN) &&
 	    (dut->ap_mode == AP_11ac || dut->ap_mode == AP_11na ||
-	     (dut->ap_mode == AP_11ax && dut->use_5g))) {
+	     (dut->ap_mode == AP_11ax && (dut->use_5g || dut->use_6g)))) {
 		if (dut->ap_countrycode[0])
 			fprintf(f, "country_code=%s\n", dut->ap_countrycode);
                 else
@@ -8033,6 +8066,48 @@ enum sigma_cmd_result cmd_ap_config_comm
                 fprintf(f, "local_pwr_constraint=3\n");
 	}
 
+	if (drv == DRIVER_MAC80211 && dut->use_6g) {
+		int op_class_6g, op_freq_seg0_idx;
+
+		fprintf(f, "ieee80211ax=1\n");
+
+		if (dut->ap_6g_unsol_prb_resp)
+			fprintf(f, "unsol_bcast_probe_resp_interval=20\n");
+		else
+			/* Enable fils discovery by default */
+			fprintf(f, "fils_discovery_max_interval=20\n");
+
+		switch (dut->ap_chwidth) {
+		case AP_20:
+			if (dut->ap_channel == 2)
+				op_class_6g = 136;
+			else
+				op_class_6g = 131;
+
+			op_freq_seg0_idx =  get_6g_seg0_idx(dut->ap_channel, 20);
+			break;
+		case AP_40:
+			op_class_6g = 132;
+			op_freq_seg0_idx =  get_6g_seg0_idx(dut->ap_channel, 40);
+			break;
+		case AP_80:
+			op_class_6g = 133;
+			op_freq_seg0_idx =  get_6g_seg0_idx(dut->ap_channel, 80);
+			break;
+		default:
+			/* other widths not supported/required for test, default to 80MHz */
+			op_class_6g = 133;
+			op_freq_seg0_idx =  get_6g_seg0_idx(dut->ap_channel, 80);
+			break;
+		}
+
+		fprintf(f, "op_class=%d\n", op_class_6g);
+		fprintf(f, "he_oper_centr_freq_seg0_idx=%d\n",
+			op_freq_seg0_idx);
+
+		fprintf(f, "sae_pwe=1\n");
+	}
+
 	if (drv == DRIVER_LINUX_WCN && dut->ap_mode == AP_11ax) {
 		if (dut->ap_txBF) {
 			fprintf(f, "he_su_beamformer=1\n");
@@ -9698,6 +9773,10 @@ static enum sigma_cmd_result cmd_ap_rese
 	dut->ft_bss_mac_cnt = 0;
 	dut->ap_interface_5g = 0;
 	dut->ap_interface_2g = 0;
+	dut->ap_interface_6g = 0;
+	dut->ap_6g_only = 0;
+	dut->ap_6g_unsol_prb_resp = 0;
+	dut->use_6g = 0;
 	dut->ap_pmf = AP_PMF_DISABLED;
 
 	dut->wsc_fragment = 0;
@@ -14252,7 +14331,7 @@ static enum sigma_cmd_result mac80211_he
 					    const char *val)
 {
 	int16_t he_ltf = 0xFF;
-	char *mode = dut->use_5g ? "5" : "2.4";
+	char *mode = dut->use_5g ? "5" : dut->use_6g ? "6" : "2.4";
 	int ret = -1;
 
 	if (dut->ar_ltf) {
--- a/sigma_dut.h
+++ b/sigma_dut.h
@@ -965,6 +965,11 @@ struct sigma_dut {
 		SAE_PWE_H2E
 	} sae_pwe;
 	int owe_ptk_workaround;
+
+	int ap_interface_6g;
+	int use_6g;
+	int ap_6g_only;
+	int ap_6g_unsol_prb_resp;
 	int ocvc;
 	int beacon_prot;
 	int client_privacy;
