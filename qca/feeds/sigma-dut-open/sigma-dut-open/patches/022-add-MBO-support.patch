--- a/ap.c
+++ b/ap.c
@@ -2203,11 +2203,17 @@ static enum sigma_cmd_result cmd_ap_set_
 		if (strcasecmp(val, "WPA2-PSK") == 0 ||
 		    (security && strcasecmp(security, "PSK") == 0 &&
 		     strcasecmp(val, "WPA2") == 0)) {
-			dut->ap_key_mgmt = AP_WPA2_PSK;
+			if (ap_ft_enabled(dut))
+				dut->ap_key_mgmt = AP_WPA2_FT_PSK;
+			else
+				dut->ap_key_mgmt = AP_WPA2_PSK;
 			dut->ap_cipher = AP_CCMP;
 		} else if (strcasecmp(val, "WPA2-EAP") == 0 ||
 			   strcasecmp(val, "WPA2-Ent") == 0) {
-			dut->ap_key_mgmt = AP_WPA2_EAP;
+			if (ap_ft_enabled(dut))
+				dut->ap_key_mgmt = AP_WPA2_ENT_FT_EAP;
+			else
+				dut->ap_key_mgmt = AP_WPA2_EAP;
 			dut->ap_cipher = AP_CCMP;
 		} else if (strcasecmp(val, "SuiteB") == 0) {
 			dut->ap_key_mgmt = AP_SUITEB;
@@ -7918,6 +7924,8 @@ enum sigma_cmd_result cmd_ap_config_comm
 			key_mgmt = "SAE";
 		else if (dut->ap_key_mgmt == AP_WPA2_PSK_SAE)
 			key_mgmt = "WPA-PSK SAE";
+		else if (dut->ap_key_mgmt == AP_WPA2_FT_PSK)
+			key_mgmt = "WPA-PSK FT-PSK";
 		else
 			key_mgmt = "WPA-PSK";
 		switch (dut->ap_pmf) {
@@ -7941,8 +7949,6 @@ enum sigma_cmd_result cmd_ap_config_comm
 		}
 		if (dut->ap_key_mgmt == AP_WPA2_PSK_SHA256)
 			fprintf(f, "wpa_key_mgmt=WPA-PSK-SHA256\n");
-		else if (dut->ap_key_mgmt == AP_WPA2_FT_PSK)
-			fprintf(f, "wpa_key_mgmt=FT-PSK\n");
 		fprintf(f, "wpa_pairwise=%s\n",
 			hostapd_cipher_name(dut->ap_cipher));
 		if (dut->ap_group_cipher != AP_NO_GROUP_CIPHER_SET)
@@ -8131,26 +8137,50 @@ skip_key_mgmt:
 
 	if (ap_ft_enabled(dut)) {
 		unsigned char own_addr[ETH_ALEN];
+		unsigned char ap2_addr[20];
 
-		fprintf(f, "mobility_domain=%s\n", dut->ap_mobility_domain);
+		fprintf(f, "mobility_domain=%s\n",
+			atoi(dut->ap_mobility_domain) ? dut->ap_mobility_domain : "0101");
 		fprintf(f, "ft_over_ds=%d\n", dut->ap_ft_ds == VALUE_ENABLED);
 		if (get_hwaddr(ifname, own_addr) < 0) {
 			memset(own_addr, 0, ETH_ALEN);
 			own_addr[0] = 0x02;
 		}
-		fprintf(f,
-			"nas_identifier=%02x%02x%02x%02x%02x%02x.nas.example.com\n",
-			own_addr[0], own_addr[1], own_addr[2],
-			own_addr[3], own_addr[4], own_addr[5]);
+		if (dut->program == PROGRAM_MBO)
+			fprintf(f,
+				"nas_identifier=nas2.example.com\n");
+		else
+			fprintf(f,
+				"nas_identifier=%02x%02x%02x%02x%02x%02x.nas.example.com\n",
+				own_addr[0], own_addr[1], own_addr[2],
+				own_addr[3], own_addr[4], own_addr[5]);
 		fprintf(f, "r1_key_holder=%02x%02x%02x%02x%02x%02x\n",
 			own_addr[0], own_addr[1], own_addr[2],
 			own_addr[3], own_addr[4], own_addr[5]);
+		snprintf(ap2_addr, sizeof(ap2_addr),
+			 "%02x:%02x:%02x:%02x:%02x:%02x",
+			 dut->ft_bss_mac_list[0][0],
+			 dut->ft_bss_mac_list[0][1],
+			 dut->ft_bss_mac_list[0][2],
+			 dut->ft_bss_mac_list[0][3],
+			 dut->ft_bss_mac_list[0][4],
+			 dut->ft_bss_mac_list[0][5]);
 		fprintf(f, "ft_psk_generate_local=1\n");
 		fprintf(f, "pmk_r1_push=0\n");
-		fprintf(f,
-			"r0kh=ff:ff:ff:ff:ff:ff * 00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff\n");
-		fprintf(f,
-			"r1kh=00:00:00:00:00:00 00:00:00:00:00:00 00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff\n");
+		if (dut->program == PROGRAM_MBO) {
+			fprintf(f,
+				"r0kh=%02x:%02x:%02x:%02x:%02x:%02x * 00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff\n",
+				own_addr[0], own_addr[1], own_addr[2],
+				own_addr[3], own_addr[4], own_addr[5]);
+			fprintf(f,
+				"r1kh=%s %s 00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff\n",
+				ap2_addr, ap2_addr);
+		} else {
+			fprintf(f,
+				"r0kh=ff:ff:ff:ff:ff:ff * 00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff\n");
+			fprintf(f,
+				"r1kh=00:00:00:00:00:00 00:00:00:00:00:00 00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff\n");
+		}
 	}
 
 	if (dut->rsne_override)
@@ -8335,6 +8365,25 @@ skip_key_mgmt:
 		}
 	}
 
+	if (dut->ap_mbo) {
+		fprintf(f, "mbo=1\n");
+		/* OCE AP mode */
+		fprintf(f, "oce=4\n");
+		/* Advertise MBO Cellular data aware capability */
+		fprintf(f, "mbo_ap_cap_ind=64\n");
+		/* MBO Cellular Data Preference set to excluded (0) */
+		fprintf(f, "mbo_cell_data_conn_pref=0\n");
+		/* Update Country environment for MBO Global Reg Domain */
+		if (dut->ap_reg_domain == REG_DOMAIN_GLOBAL)
+			fprintf(f, "country3=4\n");
+		fprintf(f, "rrm_neighbor_report=1\n");
+		fprintf(f, "rrm_beacon_report=1\n");
+		fprintf(f, "bss_transition=1\n");
+	}
+
+	if (dut->ap_gas_cb_delay)
+		fprintf(f, "gas_comeback_delay=%d\n", dut->ap_gas_cb_delay);
+
 	if(dut->ap_is_dual) {
                 f_1 = fopen(SIGMA_TMPDIR "/sigma_dut_dual-ap.conf", "w");
                 if (f_1 == NULL) {
@@ -10545,6 +10594,366 @@ static int ath_ap_send_frame_mbo(struct
 	return 1;
 }
 
+/*
+ * The following functions parse_send_frame_params_int_hex() and
+ * parse_send_frame_params_mac_trunc() are used by
+ * mac80211_ap_send_frame_bcn_rpt_req() for hostapd_cli params.
+ * Beacon Report Request is a frame used as part of the MBO program.
+ * The command for sending beacon report has a lot of
+ * arguments and having these functions reduces code size.
+ *
+ */
+static int parse_send_frame_params_int_hex(char *param, struct sigma_cmd *cmd,
+					   struct sigma_dut *dut,
+					   char *buf, size_t buf_size)
+{
+	const char *str_val;
+	int int_val;
+	char temp[100];
+
+	str_val = get_param(cmd, param);
+	if (!str_val) {
+		sigma_dut_print(dut, DUT_MSG_ERROR, "%s not given", param);
+		return -1;
+	}
+	int_val = atoi(str_val);
+
+	if (strcasecmp(param, "Channel") == 0 ||
+	    strcasecmp(param, "RegClass") == 0)
+		snprintf(temp, sizeof(temp), "%02x", int_val);
+	else
+		snprintf(temp, sizeof(temp), "%02x00", int_val);
+
+	strlcat(buf, temp, buf_size);
+	return 0;
+}
+
+static int parse_send_frame_params_mac_trunc(char *param, struct sigma_cmd *cmd,
+					     struct sigma_dut *dut,
+					     char *buf, size_t buf_size)
+{
+	const char *str_val;
+	unsigned char mac[6];
+	char temp[100];
+
+	str_val = get_param(cmd, param);
+	if (!str_val) {
+		sigma_dut_print(dut, DUT_MSG_ERROR, "%s not given", param);
+		return -1;
+	}
+
+	if (parse_mac_address(dut, str_val, mac) < 0) {
+		sigma_dut_print(dut, DUT_MSG_ERROR,
+				"MAC Address not in proper format");
+		return -1;
+	}
+	snprintf(temp, sizeof(temp), "%02x%02x%02x%02x%02x%02x",
+		 mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
+	strlcat(buf, temp, buf_size);
+	return 0;
+}
+
+static int return_subelem_id(const char *param, size_t buf_size)
+{
+	if (strncasecmp(param, "SSID", buf_size) == 0)
+		return 0;
+	else if (strncasecmp(param, "RptCond", buf_size) == 0)
+		return 1;
+	else if (strncasecmp(param, "RptDet", buf_size) == 0)
+		return 2;
+	else if (strncasecmp(param, "APChanRpt", buf_size) == 0)
+		return 51;
+	else if (strncasecmp(param, "ReqInfo", buf_size) == 0)
+		return 10;
+	else
+		return -1;
+}
+
+static void mac80211_bcn_rpt_prepare_buf(char *buf, size_t buf_size,
+					 const char *param, char *param_val,
+					 uint8_t len)
+{
+	char temp_str[120];
+	snprintf(temp_str, sizeof(temp_str), "%02x%02x%s",
+		 return_subelem_id(param, sizeof(buf)), len, param_val);
+	strlcat(buf, temp_str, buf_size);
+}
+
+static int mac80211_ap_send_frame_bcn_rpt_req(struct sigma_dut *dut,
+					      struct sigma_cmd *cmd,
+					      const char *ifname)
+{
+	char buf[200], mea_mode[10];
+	int i;
+	const char *str_val;
+	char *pos, *saveptr;
+	uint8_t len;
+	char param_val[100], temp[10];
+	char ssid_str[50], tok[20] = {0};
+
+	snprintf(buf, sizeof(buf), "-i %s req_beacon", ifname);
+
+	if (parse_send_frame_params_mac("Dest_MAC", cmd, dut, buf, sizeof(buf)))
+		return -1;
+
+	strlcat(buf, " req_mode=00 ", sizeof(buf));
+
+	if (parse_send_frame_params_int_hex("RegClass", cmd, dut, buf, sizeof(buf)))
+		return -1;
+	if (parse_send_frame_params_int_hex("Channel", cmd, dut, buf, sizeof(buf)))
+		return -1;
+	if (parse_send_frame_params_int_hex("RandInt", cmd, dut, buf, sizeof(buf)))
+		return -1;
+	if (parse_send_frame_params_int_hex("MeaDur", cmd, dut, buf, sizeof(buf)))
+		return -1;
+
+	str_val = get_param(cmd, "MeaMode");
+	if (!str_val) {
+		sigma_dut_print(dut, DUT_MSG_ERROR,
+				"MeaMode parameter not present in send bcn-rpt-req");
+		return -1;
+	}
+
+	if (strcasecmp(str_val, "passive") == 0) {
+		snprintf(mea_mode, sizeof(mea_mode), "%02x", 0);
+	} else if (strcasecmp(str_val, "active") == 0) {
+		snprintf(mea_mode, sizeof(mea_mode), "%02x", 1);
+	} else if (strcasecmp(str_val, "table") == 0) {
+		snprintf(mea_mode, sizeof(mea_mode), "%02x", 2);
+	} else {
+		sigma_dut_print(dut, DUT_MSG_ERROR,
+				"MEA-MODE Value not correctly given");
+		return -1;
+	}
+	strlcat(buf, mea_mode, sizeof(buf));
+
+	if (parse_send_frame_params_mac_trunc("BSSID", cmd, dut, buf, sizeof(buf)))
+		return -1;
+
+	str_val = get_param(cmd, "SSID");
+	if (str_val && strlen(str_val)) {
+		for (i = 0; i < strlen(str_val); i++)
+			snprintf(ssid_str + i * 2, 3, "%02x", str_val[i]);
+
+		snprintf(param_val, sizeof(param_val), "%s", ssid_str);
+		len = (strlen(ssid_str) / 2);
+		mac80211_bcn_rpt_prepare_buf(buf, sizeof(buf), "SSID", param_val, len);
+	}
+
+	str_val = get_param(cmd, "RptCond");
+	if (str_val) {
+		snprintf(param_val, sizeof(param_val), "%02x%02x",
+			/* Threshold/Offset value for Beacon Reporting info */
+			 atoi(str_val), 0);
+		len = 2;
+		mac80211_bcn_rpt_prepare_buf(buf, sizeof(buf), "RptCond", param_val, len);
+	}
+
+	str_val = get_param(cmd, "RptDet");
+	if (str_val) {
+		snprintf(param_val, sizeof(param_val), "%02x", atoi(str_val));
+		len = 1;
+		mac80211_bcn_rpt_prepare_buf(buf, sizeof(buf), "RptDet", param_val, len);
+	}
+
+	str_val = get_param(cmd, "APChanRpt");
+	if (str_val) {
+		pos = strtok_r((char *)str_val, "_", &saveptr);
+		while (pos) {
+			snprintf(temp, 3, "%02x", atoi(pos));
+			strlcat(tok, temp, sizeof(tok));
+			pos = strtok_r(NULL, "_", &saveptr);
+		}
+		snprintf(param_val, sizeof(param_val), "%s", tok);
+		len = (strlen(tok) / 2);
+		mac80211_bcn_rpt_prepare_buf(buf, sizeof(buf), "APChanRpt", param_val, len);
+	}
+
+	str_val = get_param(cmd, "ReqInfo");
+	if (str_val) {
+		pos = strtok_r((char *)str_val, "_", &saveptr);
+		memset(tok, '\0', sizeof(tok));
+		while (pos) {
+			snprintf(temp, 3, "%02x", atoi(pos));
+			strlcat(tok, temp, sizeof(tok));
+			pos = strtok_r(NULL, "_", &saveptr);
+		}
+		snprintf(param_val, sizeof(param_val), "%s", tok);
+		len = (strlen(tok) / 2);
+		mac80211_bcn_rpt_prepare_buf(buf, sizeof(buf), "ReqInfo", param_val, len);
+	}
+
+	sigma_dut_print(dut, DUT_MSG_INFO,"bcn req buf %s\n", buf);
+
+	if (run_hostapd_cli(dut, buf) != 0)
+		return -1;
+
+	return 0;
+}
+
+static int mac80211_ap_send_frame_btm_req(struct sigma_dut *dut,
+					  struct sigma_conn *conn,
+					  struct sigma_cmd *cmd,
+					  const char *ifname)
+{
+	unsigned char mac_addr[ETH_ALEN];
+	unsigned char *pref_mac_addr, *self_mac;
+	int disassoc_timer;
+	char buf[500];
+	const char *val;
+	int i, cand_list = 0, bss_term = 0, self_ap_ne_pref = 0;
+	char nrbuf[dut->mbo_pref_ap_cnt + 1][100];
+	char nr_cmd_buf[200] = {0};
+	char bss_term_str[20] = {0};
+
+	val = get_param(cmd, "Dest_MAC");
+	if (!val || parse_mac_address(dut, val, mac_addr) < 0) {
+		sigma_dut_print(dut, DUT_MSG_ERROR,
+				"MAC Address not in proper format");
+		return -1;
+	}
+
+	val = get_param(cmd, "Disassoc_Timer");
+	if (val)
+		disassoc_timer = atoi(val);
+	else
+		disassoc_timer = dut->ap_disassoc_timer;
+	if (disassoc_timer < 0) {
+		sigma_dut_print(dut, DUT_MSG_ERROR,
+				"Invalid Disassoc_Timer value %d",
+				disassoc_timer);
+		return -1;
+	}
+
+	val = get_param(cmd, "Cand_List");
+	if (val && val[0] && dut->mbo_pref_ap_cnt)
+		cand_list = atoi(val);
+
+	if (cand_list) {
+		self_mac = dut->mbo_self_ap_tuple.mac_addr;
+		self_ap_ne_pref = dut->mbo_self_ap_tuple.ap_ne_pref;
+		snprintf(nrbuf[0], sizeof(nrbuf[0]),
+			 "neighbor=%02x:%02x:%02x:%02x:%02x:%02x,0x00000017,%02d,%02d,%02d,0301%02x ",
+			 self_mac[0], self_mac[1], self_mac[2],
+			 self_mac[3], self_mac[4], self_mac[5],
+			 dut->mbo_self_ap_tuple.ap_ne_class,
+			 dut->mbo_self_ap_tuple.ap_ne_op_ch, 0,
+			 dut->ap_btmreq_disassoc_imnt ? 0 : self_ap_ne_pref);
+
+		for (i = 0; i < dut->mbo_pref_ap_cnt; i++) {
+			pref_mac_addr = dut->mbo_pref_aps[i].mac_addr;
+			snprintf(nrbuf[i + 1], sizeof(nrbuf[0]),
+				"neighbor=%02x:%02x:%02x:%02x:%02x:%02x,0x00000017,%02d,%02d,%02d,0301%02x ",
+				pref_mac_addr[0], pref_mac_addr[1], pref_mac_addr[2],
+				pref_mac_addr[3], pref_mac_addr[4], pref_mac_addr[5],
+				dut->mbo_pref_aps[i].ap_ne_class,
+				dut->mbo_pref_aps[i].ap_ne_op_ch, 0,
+				dut->mbo_pref_aps[i].ap_ne_pref);
+		}
+	}
+
+	for (i = 0; (i < dut->mbo_pref_ap_cnt + 1); i++)
+		strlcat(nr_cmd_buf, nrbuf[i], sizeof(nr_cmd_buf));
+
+	if (dut->ap_btmreq_term_bit && dut->ap_btmreq_bss_term_tsf) {
+		bss_term = 1;
+		snprintf(bss_term_str, sizeof(bss_term_str), "bss_term=%02d,%02d,",
+			 dut->ap_btmreq_bss_term_tsf, dut->ap_btmreq_bss_term_dur);
+	}
+
+	if (dut->ap_btmreq_disassoc_imnt)
+		dut->ap_assoc_delay = 1;
+
+	snprintf(buf, sizeof(buf),
+		 "-i %s bss_tm_req %02x:%02x:%02x:%02x:%02x:%02x pref=%d disassoc_imminent=%d disassoc_timer=%d %s %s mbo=0:%d:1",
+		 ifname, mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3],
+		 mac_addr[4], mac_addr[5], cand_list,
+		 dut->ap_btmreq_disassoc_imnt, disassoc_timer,
+		 bss_term ? bss_term_str : " ",
+		 cand_list ? nr_cmd_buf : " ", dut->ap_assoc_delay);
+
+	sigma_dut_print(dut, DUT_MSG_INFO,"bss_tm_req buf %s\n", buf);
+
+	if (run_hostapd_cli(dut, buf) != 0)
+		return -1;
+
+	if (dut->ap_btmreq_term_bit) {
+		if (dut->ap_btmreq_bss_term_tsf >= 3)
+			inform_and_sleep(dut, dut->ap_btmreq_bss_term_tsf - 3);
+
+		snprintf(buf, sizeof(buf),
+			 "-i %s disassociate %02x:%02x:%02x:%02x:%02x:%02x",
+			 ifname, mac_addr[0], mac_addr[1], mac_addr[2],
+			 mac_addr[3], mac_addr[4], mac_addr[5]);
+		if (run_hostapd_cli(dut, buf) != 0)
+			return -1;
+
+		inform_and_sleep(dut, 1);
+		snprintf(buf, sizeof(buf), "-i %s disable", ifname);
+		if (run_hostapd_cli(dut, buf) != 0)
+			return -1;
+
+		inform_and_sleep(dut, 2);
+		send_resp(dut, conn, SIGMA_RUNNING, NULL);
+		inform_and_sleep(dut, dut->ap_btmreq_bss_term_dur * 60);
+		snprintf(buf, sizeof(buf), "-i %s enable", ifname);
+		if (run_hostapd_cli(dut, buf) != 0)
+			return -1;
+	}
+
+	return 0;
+}
+
+static int mac80211_ap_send_frame_disassoc(struct sigma_dut *dut,
+					   struct sigma_cmd *cmd,
+					   const char *ifname)
+{
+	unsigned char mac_addr[ETH_ALEN];
+	const char *val;
+	char buf[100];
+
+	val = get_param(cmd, "Dest_MAC");
+	if (!val || parse_mac_address(dut, val, mac_addr) < 0) {
+		sigma_dut_print(dut, DUT_MSG_ERROR,
+				"MAC Address not in proper format");
+		return -1;
+	}
+
+	snprintf(buf, sizeof(buf), "-i %s disassociate %02x:%02x:%02x:%02x:%02x:%02x",
+		 ifname, mac_addr[0], mac_addr[1], mac_addr[2],
+		 mac_addr[3], mac_addr[4], mac_addr[5]);
+
+	if (run_hostapd_cli(dut, buf) != 0)
+		return -1;
+
+	return 0;
+}
+
+
+static int mac80211_ap_send_frame_mbo(struct sigma_dut *dut, struct sigma_conn *conn,
+				      struct sigma_cmd *cmd)
+{
+	const char *val;
+	const char *ifname;
+
+	ifname = get_main_ifname(dut);
+
+	val = get_param(cmd, "FrameName");
+	if (!val)
+		return -1;
+
+	if (strcasecmp(val, "BTMReq") == 0)
+		mac80211_ap_send_frame_btm_req(dut, conn, cmd, ifname);
+	else if (strcasecmp(val, "BcnRptReq") == 0)
+		mac80211_ap_send_frame_bcn_rpt_req(dut, cmd, ifname);
+	else if (strcasecmp(val, "disassoc") == 0)
+		mac80211_ap_send_frame_disassoc(dut, cmd, ifname);
+	else
+		return -1;
+
+	return 1;
+}
+
 
 static int ap_send_frame_vht(struct sigma_dut *dut, struct sigma_conn *conn,
 			     struct sigma_cmd *cmd)
@@ -10597,6 +11006,8 @@ static int ap_send_frame_mbo(struct sigm
 			     struct sigma_cmd *cmd)
 {
 	switch (get_driver_type(dut)) {
+	case DRIVER_MAC80211:
+		return mac80211_ap_send_frame_mbo(dut, conn, cmd);
 	case DRIVER_ATHEROS:
 		return ath_ap_send_frame_mbo(dut, conn, cmd);
 	case DRIVER_OPENWRT:
@@ -13093,6 +13504,185 @@ static int mac80211_vht_chnum_band(struc
 	return 0;
 }
 
+static void mac80211_prepare_nr_buf(struct sigma_dut *dut, char *nr_buf,
+				    uint8_t *mac_addr, int ap_ne_class,
+				    int ap_ne_ch, int ap_ne_pref)
+{
+	char temp_str_val[100];
+	/* AP Reachable, Security, Spectrum mgmt bits set */
+	uint32_t bssid_info = 0x00000017;
+	uint32_t phy_type = 0x0;
+	uint32_t bss_cand_pref_subelem = 0x301;
+
+	/* Neighbor Report element nr = BSSID + BSSID info + op_class + chan +
+         * phy type + BSS Trans Cand Pref subelements
+	 */
+	snprintf(temp_str_val, sizeof(temp_str_val), "%02x%02x%02x%02x%02x%02x%08x",
+		 mac_addr[0], mac_addr[1], mac_addr[2],
+		 mac_addr[3], mac_addr[4], mac_addr[5],
+		 bssid_info);
+	temp_str_val[sizeof(temp_str_val) - 1] = '\0';
+
+	memcpy(nr_buf, temp_str_val, strlen(temp_str_val) + 1);
+
+	snprintf(temp_str_val, sizeof(temp_str_val), "%02x%02x%02x%04x%02x",
+		 ap_ne_class, ap_ne_ch, phy_type, bss_cand_pref_subelem,
+		 ap_ne_pref);
+
+	temp_str_val[sizeof(temp_str_val) - 1] = '\0';
+
+	strlcat(nr_buf + strlen(nr_buf), temp_str_val,
+		sizeof(nr_buf) - strlen(nr_buf));
+}
+
+static int mac80211_update_mbo_pref_ap_list(struct sigma_dut *dut)
+{
+	int i;
+	int least_pref = 1 << 8;
+	char ifname[20];
+	uint8_t self_mac[ETH_ALEN];
+	char buf[200], nr_buf[200];
+	int ap_ne_class, ap_ne_pref, ap_ne_op_ch;
+
+	get_if_name(dut, ifname, sizeof(ifname), 1);
+	get_hwaddr(ifname, self_mac);
+
+	/* Find the least preference number */
+	for (i = 0; i < dut->mbo_pref_ap_cnt; i++) {
+		unsigned char *mac_addr = dut->mbo_pref_aps[i].mac_addr;
+
+		ap_ne_class = 1;
+		ap_ne_pref = 255;
+		ap_ne_op_ch = 1;
+		if (dut->mbo_pref_aps[i].ap_ne_pref != -1)
+			ap_ne_pref = dut->mbo_pref_aps[i].ap_ne_pref;
+		if (dut->mbo_pref_aps[i].ap_ne_class != -1)
+			ap_ne_class = dut->mbo_pref_aps[i].ap_ne_class;
+		if (dut->mbo_pref_aps[i].ap_ne_op_ch != -1)
+			ap_ne_op_ch = dut->mbo_pref_aps[i].ap_ne_op_ch;
+
+		if (ap_ne_pref < least_pref)
+			least_pref = ap_ne_pref;
+
+		mac80211_prepare_nr_buf(dut, nr_buf, mac_addr, ap_ne_class,
+					ap_ne_op_ch, ap_ne_pref);
+
+		snprintf(buf, sizeof(buf),
+			 "-i %s set_neighbor %02x:%02x:%02x:%02x:%02x:%02x ssid=\\\"%s\\\" nr=%s",
+			 ifname, mac_addr[0], mac_addr[1], mac_addr[2],
+			 mac_addr[3], mac_addr[4], mac_addr[5],
+			 dut->ap_ssid, nr_buf);
+
+		sigma_dut_print(dut, DUT_MSG_INFO,"set_nei buf %s\n", buf);
+
+		if (run_hostapd_cli(dut, buf) != 0)
+			return -1;
+	}
+
+	/* Now add the self AP Address */
+	if (dut->mbo_self_ap_tuple.ap_ne_class == -1) {
+		if (dut->ap_channel <= 11)
+			ap_ne_class = 81;
+		else
+			ap_ne_class = 115;
+		dut->mbo_self_ap_tuple.ap_ne_class = ap_ne_class;
+	} else {
+		ap_ne_class = dut->mbo_self_ap_tuple.ap_ne_class;
+	}
+
+	if (dut->mbo_self_ap_tuple.ap_ne_op_ch == -1) {
+		ap_ne_op_ch = dut->ap_channel;
+		dut->mbo_self_ap_tuple.ap_ne_op_ch = ap_ne_op_ch;
+	} else {
+		ap_ne_op_ch = dut->mbo_self_ap_tuple.ap_ne_op_ch;
+	}
+
+	if (dut->mbo_self_ap_tuple.ap_ne_pref == -1) {
+		ap_ne_pref = least_pref - 1;
+		dut->mbo_self_ap_tuple.ap_ne_pref = ap_ne_pref;
+	} else {
+		ap_ne_pref = dut->mbo_self_ap_tuple.ap_ne_pref;
+	}
+
+	memcpy(dut->mbo_self_ap_tuple.mac_addr, self_mac, ETH_ALEN);
+
+	mac80211_prepare_nr_buf(dut, nr_buf, self_mac, ap_ne_class,
+				ap_ne_op_ch, ap_ne_pref);
+
+	snprintf(buf, sizeof(buf),
+		 "-i %s set_neighbor %02x:%02x:%02x:%02x:%02x:%02x ssid=\\\"%s\\\" nr=%s",
+		 ifname, self_mac[0], self_mac[1], self_mac[2],
+		 self_mac[3], self_mac[4], self_mac[5], dut->ap_ssid, nr_buf);
+
+	sigma_dut_print(dut, DUT_MSG_INFO,"set self buf %s\n", buf);
+
+	if (run_hostapd_cli(dut, buf) != 0)
+		return -1;
+
+	return 0;
+}
+
+static int mac80211_set_nebor(struct sigma_dut *dut, const char *ifname,
+			      struct sigma_cmd *cmd)
+{
+	unsigned char mac_addr[ETH_ALEN];
+	const char *val;
+	/*
+	 * -1 is invalid value for the following
+	 *  to differentiate between unset and set values
+	 *  -1 => implies not set by CAPI
+	 */
+	int ap_ne_class = -1, ap_ne_op_ch = -1, ap_ne_pref = -1;
+	int list_offset = dut->mbo_pref_ap_cnt;
+
+	if (list_offset >= MBO_MAX_PREF_BSSIDS) {
+		sigma_dut_print(dut, DUT_MSG_ERROR,
+				"AP Pref Entry list is full");
+		return -1;
+	}
+
+	val = get_param(cmd, "Nebor_Op_Class");
+	if (val)
+		ap_ne_class = atoi(val);
+
+	val = get_param(cmd, "Nebor_Op_Ch");
+	if (val)
+		ap_ne_op_ch = atoi(val);
+
+	val = get_param(cmd, "Nebor_Pref");
+	if (val)
+		ap_ne_pref = atoi(val);
+
+	val = get_param(cmd, "Nebor_BSSID");
+	if (!val || parse_mac_address(dut, val, mac_addr) < 0)
+		return -1;
+
+	mbo_add_nebor_entry(dut, mac_addr, ap_ne_class, ap_ne_op_ch,
+			    ap_ne_pref);
+
+	if (mac80211_update_mbo_pref_ap_list(dut))
+		return -1;
+
+	return 0;
+}
+
+static void mac80211_set_assoc_disallow(struct sigma_dut *dut, const char *ifname,
+					const char *val)
+{
+	char buf[100];
+	if (strcasecmp(val, "enable") == 0) {
+		snprintf(buf, sizeof(buf), "-i %s set mbo_assoc_disallow 1",
+			 ifname);
+		run_hostapd_cli(dut, buf);
+	} else if (strcasecmp(val, "disable") == 0) {
+		snprintf(buf, sizeof(buf), "-i %s set mbo_assoc_disallow 0",
+			 ifname);
+		run_hostapd_cli(dut, buf);
+	} else {
+		sigma_dut_print(dut, DUT_MSG_ERROR,
+				"Unsupported assoc_disallow");
+	}
+}
 
 static enum sigma_cmd_result
 mac80211_he_tx_bandwidth(struct sigma_dut *dut, struct sigma_conn *conn,
@@ -13228,6 +13818,39 @@ static enum sigma_cmd_result mac80211_ap
 	if (val && mac80211_vht_chnum_band(dut, ifname, val) < 0)
 		return -1;
 
+	mac80211_set_nebor(dut, ifname, cmd);
+
+	val = get_param(cmd, "Assoc_Disallow");
+	if (val)
+		mac80211_set_assoc_disallow(dut, ifname, val);
+
+	val = get_param(cmd, "BTMReq_DisAssoc_Imnt");
+	if (val) {
+		dut->ap_btmreq_disassoc_imnt = atoi(val);
+		dut->ap_disassoc_timer = 10;
+	}
+
+	val = get_param(cmd, "Assoc_Delay");
+	if (val) {
+		dut->ap_assoc_delay = 1;
+	}
+
+	val = get_param(cmd, "Disassoc_Timer");
+	if (val)
+		dut->ap_disassoc_timer = atoi(val);
+
+	val = get_param(cmd, "BTMReq_Term_Bit");
+	if (val)
+		dut->ap_btmreq_term_bit = atoi(val);
+
+	val = get_param(cmd, "BSS_Term_Duration");
+	if (val)
+		dut->ap_btmreq_bss_term_dur = atoi(val);
+
+	val = get_param(cmd, "BSS_Term_TSF");
+	if (val)
+		dut->ap_btmreq_bss_term_tsf = atoi(val);
+
 	val = get_param(cmd, "txBandwidth");
 	if (val) {
 		res = mac80211_he_tx_bandwidth(dut, conn, ifname, val,
