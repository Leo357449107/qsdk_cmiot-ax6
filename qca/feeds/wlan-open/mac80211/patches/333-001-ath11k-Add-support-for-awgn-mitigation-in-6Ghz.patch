From a75255403217765211dfb79dd0e8bff5c6ae331c Mon Sep 17 00:00:00 2001
From: Hari Chandrakanthan <quic_haric@quicinc.com>
Date: Fri, 29 Oct 2021 19:00:22 +0530
Subject: [PATCH] ath11k : Add support for awgn mitigation in 6Ghz

AWGN - Additive white Gaussian Noise

support to simulate awgn event with channel bw
interference bitmap is added.

channel bw interference bitmap holds the interference information
on primary and secondary channels.

Eg: For 80Mhz operating bandwidth, the chan bw interference
bitmap can be as follows.

segment chan_bw_interference_bitmap
0       0x01
1       0x02
2       0x04
3       0x08

segment 0 - primary 20Mhz
segment 1 - secondary 20Mhz
segment 2 - secondary 40Mhz lower
segment 3 - secondary 40Mhz upper

support to update rx_channel is added

Signed-off-by: Hari Chandrakanthan <quic_haric@quicinc.com>
---
 drivers/net/wireless/ath/ath11k/debugfs.c |  6 ++-
 drivers/net/wireless/ath/ath11k/mac.c     | 71 ++++++++++++++++++++++++++++++-
 drivers/net/wireless/ath/ath11k/wmi.c     | 18 +++-----
 drivers/net/wireless/ath/ath11k/wmi.h     |  2 +-
 4 files changed, 83 insertions(+), 14 deletions(-)

diff --git a/drivers/net/wireless/ath/ath11k/debugfs.c b/drivers/net/wireless/ath/ath11k/debugfs.c
index d29e54b..3cb3bda 100644
--- a/drivers/net/wireless/ath/ath11k/debugfs.c
+++ b/drivers/net/wireless/ath/ath11k/debugfs.c
@@ -2388,6 +2388,7 @@ static ssize_t ath11k_write_simulate_awgn(struct file *file,
 {
 	struct ath11k *ar = file->private_data;
 	int ret;
+	u32 chan_bw_interference_bitmap;
 
 	mutex_lock(&ar->conf_mutex);
 	if (ar->state != ATH11K_STATE_ON) {
@@ -2395,7 +2396,10 @@ static ssize_t ath11k_write_simulate_awgn(struct file *file,
 		goto exit;
 	}
 
-	ret = ath11k_wmi_simulate_awgn(ar);
+	if (kstrtou32_from_user(user_buf, count, 0, &chan_bw_interference_bitmap))
+		return -EINVAL;
+
+	ret = ath11k_wmi_simulate_awgn(ar, chan_bw_interference_bitmap);
 	if (ret)
 		goto exit;
 
diff --git a/drivers/net/wireless/ath/ath11k/mac.c b/drivers/net/wireless/ath/ath11k/mac.c
index bcf4839..bca5385 100644
--- a/drivers/net/wireless/ath/ath11k/mac.c
+++ b/drivers/net/wireless/ath/ath11k/mac.c
@@ -7968,6 +7968,75 @@ ath11k_mac_change_chanctx_fill_iter(void *data, u8 *mac,
 	arg->next_vif++;
 }
 
+static void ath11k_mac_num_chanctxs_iter(struct ieee80211_hw *hw,
+					 struct ieee80211_chanctx_conf *conf,
+					 void *data)
+{
+	int *num = data;
+
+	(*num)++;
+}
+
+static int ath11k_mac_num_chanctxs(struct ath11k *ar)
+{
+	int num = 0;
+
+	ieee80211_iter_chan_contexts_atomic(ar->hw,
+					    ath11k_mac_num_chanctxs_iter,
+					    &num);
+
+	return num;
+}
+
+static void ath11k_mac_update_rx_channel(struct ath11k *ar,
+					 struct ieee80211_chanctx_conf *ctx,
+					 struct ieee80211_vif_chanctx_switch *vifs,
+					 int n_vifs)
+{
+	struct cfg80211_chan_def *def = NULL;
+
+	/* Both locks are required because ar->rx_channel is modified. This
+	 * allows readers to hold either lock.
+	 */
+	lockdep_assert_held(&ar->conf_mutex);
+	lockdep_assert_held(&ar->data_lock);
+
+	WARN_ON(ctx && vifs);
+	WARN_ON(vifs && !n_vifs);
+
+	/* FIXME: Sort of an optimization and a workaround. Peers and vifs are
+	 * on a linked list now. Doing a lookup peer -> vif -> chanctx for each
+	 * ppdu on Rx may reduce performance on low-end systems. It should be
+	 * possible to make tables/hashmaps to speed the lookup up (be vary of
+	 * cpu data cache lines though regarding sizes) but to keep the initial
+	 * implementation simple and less intrusive fallback to the slow lookup
+	 * only for multi-channel cases. Single-channel cases will remain to
+	 * use the old channel derival and thus performance should not be
+	 * affected much.
+	 */
+	rcu_read_lock();
+	if (!ctx && ath11k_mac_num_chanctxs(ar) == 1) {
+		ieee80211_iter_chan_contexts_atomic(ar->hw,
+						    ath11k_mac_get_any_chandef_iter,
+						    &def);
+		if (vifs)
+			def = &vifs[0].new_ctx->def;
+
+		ar->rx_channel = def->chan;
+	} else if ((ctx && ath11k_mac_num_chanctxs(ar) == 0) ||
+		  (ctx && (ar->state == ATH11K_STATE_RESTARTED))) {
+	       /* During driver restart due to firmware assert, since mac80211
+		* already has valid channel context for given radio, channel
+		* context iteration return num_chanctx > 0. So fix rx_channel
+		* when restart is in progress.
+		*/
+		ar->rx_channel = ctx->def.chan;
+	} else {
+		ar->rx_channel = NULL;
+	}
+	rcu_read_unlock();
+}
+
 static void
 ath11k_mac_update_vif_chan(struct ath11k *ar,
 			   struct ieee80211_vif_chanctx_switch *vifs,
@@ -8028,7 +8097,7 @@ ath11k_mac_update_vif_chan(struct ath11k *ar,
 
 	ath11k_smart_ant_disable(arvif);
 
-	/* TODO: Update ar->rx_channel */
+	ath11k_mac_update_rx_channel(ar, NULL, vifs, n_vifs);
 
 	for (i = 0; i < n_vifs; i++) {
 		struct vdev_up_params params = {0};
diff --git a/drivers/net/wireless/ath/ath11k/wmi.c b/drivers/net/wireless/ath/ath11k/wmi.c
index 4c95b96..d485bbe 100644
--- a/drivers/net/wireless/ath/ath11k/wmi.c
+++ b/drivers/net/wireless/ath/ath11k/wmi.c
@@ -8745,7 +8745,6 @@ ath11k_wmi_dcs_awgn_interference_event(struct ath11k_base *ab,
 	const struct wmi_dcs_interference_ev *dcs_intf_ev;
 	struct wmi_dcs_awgn_info awgn_info = {};
 	struct ath11k *ar;
-	struct ath11k_vif *arvif;
 	const struct wmi_tlv *tlv;
 	u16 tlv_tag;
 	u8 *ptr;
@@ -8809,15 +8808,10 @@ ath11k_wmi_dcs_awgn_interference_event(struct ath11k_base *ab,
 		goto exit;
 	}
 
-	ath11k_info(ab, "Interface(pdev %d) will be disabled because of AWGN interference\n",
+	ath11k_info(ab, "Interface(pdev %d) : AWGN interference detected\n",
 		    dcs_intf_ev->pdev_id);
 
-	list_for_each_entry(arvif, &ar->arvifs, list) {
-		if (arvif->is_started && arvif->vdev_type == WMI_VDEV_TYPE_AP) {
-			ieee80211_awgn_detected(arvif->vif);
-		}
-	}
-
+	ieee80211_awgn_detected(ar->hw, awgn_info.chan_bw_interference_bitmap);
 exit:
 	rcu_read_unlock();
 }
@@ -10300,7 +10294,7 @@ int ath11k_wmi_simulate_radar(struct ath11k *ar)
 }
 
 
-int ath11k_wmi_simulate_awgn(struct ath11k *ar)
+int ath11k_wmi_simulate_awgn(struct ath11k *ar, u32 chan_bw_interference_bitmap)
 {
 	struct ath11k_vif *arvif;
 	u32 awgn_args[WMI_AWGN_MAX_TEST_ARGS];
@@ -10323,14 +10317,16 @@ int ath11k_wmi_simulate_awgn(struct ath11k *ar)
 		return -EINVAL;
 
 	awgn_args[WMI_AWGN_TEST_AWGN_INT] = WMI_UNIT_TEST_AWGN_INTF_TYPE;
-	awgn_args[WMI_AWGN_TEST_BITMAP] = WMI_UNIT_TEST_AWGN_PRIMARY_20;
+	awgn_args[WMI_AWGN_TEST_BITMAP] = chan_bw_interference_bitmap;
 
 	wmi_ut.vdev_id = arvif->vdev_id;
 	wmi_ut.module_id = WMI_AWGN_UNIT_TEST_MODULE;
 	wmi_ut.num_args = WMI_AWGN_MAX_TEST_ARGS;
 	wmi_ut.diag_token = WMI_AWGN_UNIT_TEST_TOKEN;
 
-	ath11k_dbg(ar->ab, ATH11K_DBG_WMI, "Triggering AWGN Simulation\n");
+	ath11k_dbg(ar->ab, ATH11K_DBG_WMI,
+		   "Triggering AWGN Simulation, interference bitmap : 0x%x\n",
+		   chan_bw_interference_bitmap);
 
 	return ath11k_wmi_send_unit_test_cmd(ar, wmi_ut, awgn_args);
 }
diff --git a/drivers/net/wireless/ath/ath11k/wmi.h b/drivers/net/wireless/ath/ath11k/wmi.h
index 85ef7c3..e7101f0 100644
--- a/drivers/net/wireless/ath/ath11k/wmi.h
+++ b/drivers/net/wireless/ath/ath11k/wmi.h
@@ -6924,7 +6924,7 @@ void ath11k_wmi_fw_stats_fill(struct ath11k *ar,
 			      struct ath11k_fw_stats *fw_stats, u32 stats_id,
 			      char *buf);
 int ath11k_wmi_simulate_radar(struct ath11k *ar);
-int ath11k_wmi_simulate_awgn(struct ath11k *ar);
+int ath11k_wmi_simulate_awgn(struct ath11k *ar, u32 chan_bw_interference_bitmap);
 int ath11k_wmi_send_twt_enable_cmd(struct ath11k *ar, u32 pdev_id);
 int ath11k_wmi_send_twt_disable_cmd(struct ath11k *ar, u32 pdev_id);
 int ath11k_wmi_send_twt_add_dialog_cmd(struct ath11k *ar,
-- 
2.7.4

