From 6461698d739e3adabefadff6865861c8c2231825 Mon Sep 17 00:00:00 2001
From: Rameshkumar Sundaram <ramess@codeaurora.org>
Date: Tue, 3 Aug 2021 20:38:14 +0530
Subject: [PATCH] ath11k: use cache line aligned buffers for dbring

The DMA buffers of dbring which is used for spectral/cfr
starts at certain offset from original kmalloc() returned buffer.
This is not cache line aligned.
And also we try to access the data that is immediately before
this offset address (i.e. buff->paddr) after doing dma map.
This will bring part of dma mapped buffer to cache as cache
line size is 64bytes.
if CPU happen to write back this cache after HW has dma'ed the data,
then host will lose part of buffer data.

Fix this by mapping a cache line aligned buffer to dma.

Signed-off-by: Rameshkumar Sundaram <ramess@codeaurora.org>
---
 drivers/net/wireless/ath/ath11k/dbring.c | 24 ++++++++++++++++--------
 drivers/net/wireless/ath/ath11k/dbring.h |  2 +-
 2 files changed, 17 insertions(+), 9 deletions(-)

diff --git a/drivers/net/wireless/ath/ath11k/dbring.c b/drivers/net/wireless/ath/ath11k/dbring.c
index 635b51e..67e6a05 100644
--- a/drivers/net/wireless/ath/ath11k/dbring.c
+++ b/drivers/net/wireless/ath/ath11k/dbring.c
@@ -130,22 +130,29 @@ static int ath11k_dbring_fill_bufs(struct ath11k *ar,
 	req_entries = min(num_free, ring->bufs_max);
 	num_remain = req_entries;
 	align = ring->buf_align;
-	size = sizeof(*buff) + ring->buf_sz + align - 1;
+	size = ring->buf_sz + align - 1;
 
 	while (num_remain > 0) {
-		buff = kzalloc(size, gfp);
+		buff = kzalloc(sizeof(*buff), gfp);
 		if (!buff)
 			break;
+		buff->payload = kzalloc(size, gfp);
+
+		if (!buff->payload) {
+			kfree(buff);
+			break;
+		}
 
 		ret = ath11k_dbring_bufs_replenish(ar, ring, buff, id, gfp);
 		if (ret) {
 			ath11k_warn(ar->ab, "failed to replenish db ring num_remain %d req_ent %d\n",
 				    num_remain, req_entries);
+			kfree(buff->payload);
 			kfree(buff);
 			break;
 		}
 		num_remain--;
-		ATH11K_MEMORY_STATS_INC(ar->ab, malloc_size, size);
+		ATH11K_MEMORY_STATS_INC(ar->ab, malloc_size, sizeof(*buff) + size);
 	}
 
 	spin_unlock_bh(&srng->lock);
@@ -331,7 +338,7 @@ int ath11k_dbring_buffer_release_event(struct ath11k_base *ab,
 
 	srng = &ab->hal.srng_list[ring->refill_srng.ring_id];
 	num_entry = ev->fixed.num_buf_release_entry;
-	size = sizeof(*buff) + ring->buf_sz + ring->buf_align - 1;
+	size = ring->buf_sz + ring->buf_align - 1;
 	num_buff_reaped = 0;
 
 	spin_lock_bh(&srng->lock);
@@ -371,8 +378,8 @@ int ath11k_dbring_buffer_release_event(struct ath11k_base *ab,
 			if (status == ATH11K_CORRELATE_STATUS_HOLD)
 				continue;
 		}
-
-		memset(buff, 0, size);
+		buff->paddr = NULL;
+		memset(buff->payload, 0, size);
 		ath11k_dbring_bufs_replenish(ar, ring, buff, module_id, GFP_ATOMIC);
 	}
 
@@ -393,14 +400,15 @@ void ath11k_dbring_buf_cleanup(struct ath11k *ar, struct ath11k_dbring *ring)
 {
 	struct ath11k_dbring_element *buff;
 	int buf_id;
+	int size = ring->buf_sz + ring->buf_align - 1;
 
 	spin_lock_bh(&ring->idr_lock);
 	idr_for_each_entry(&ring->bufs_idr, buff, buf_id) {
 		idr_remove(&ring->bufs_idr, buf_id);
 		dma_unmap_single(ar->ab->dev, buff->paddr,
 				 ring->buf_sz, DMA_FROM_DEVICE);
-		ATH11K_MEMORY_STATS_DEC(ar->ab, malloc_size, sizeof(*buff) +
-					ring->buf_sz + ring->buf_align - 1);
+		ATH11K_MEMORY_STATS_DEC(ar->ab, malloc_size, sizeof(*buff) + size);
+		kfree(buff->payload);
 		kfree(buff);
 	}
 
diff --git a/drivers/net/wireless/ath/ath11k/dbring.h b/drivers/net/wireless/ath/ath11k/dbring.h
index 67eaf1e..2f7dd68 100644
--- a/drivers/net/wireless/ath/ath11k/dbring.h
+++ b/drivers/net/wireless/ath/ath11k/dbring.h
@@ -13,7 +13,7 @@
 
 struct ath11k_dbring_element {
 	dma_addr_t paddr;
-	u8 payload[0];
+	u32 *payload;
 };
 
 struct ath11k_dbring_data {
-- 
2.7.4

