From 1409ed7939f67dd8ed19f4b36e51a2f3320d25b1 Mon Sep 17 00:00:00 2001
From: Maharaja Kennadyrajan <mkenna@codeaurora.org>
Date: Mon, 28 Jun 2021 11:03:18 +0530
Subject: [PATCH] Add smart APIs

Signed-off-by: Maharaja Kennadyrajan <mkenna@codeaurora.org>
---
 drivers/net/wireless/ath/ath11k/Kconfig         |   7 +
 drivers/net/wireless/ath/ath11k/Makefile        |   1 +
 drivers/net/wireless/ath/ath11k/core.c          |   6 +
 drivers/net/wireless/ath/ath11k/core.h          |  22 +
 drivers/net/wireless/ath/ath11k/debug.h         |   1 +
 drivers/net/wireless/ath/ath11k/hw.c            |   1 +
 drivers/net/wireless/ath/ath11k/hw.h            |  14 +
 drivers/net/wireless/ath/ath11k/mac.c           |  27 +-
 drivers/net/wireless/ath/ath11k/mac.h           |   1 +
 drivers/net/wireless/ath/ath11k/smart_ant.h     |  81 +++
 drivers/net/wireless/ath/ath11k/smart_ant_alg.c | 432 ++++++++++++++++
 drivers/net/wireless/ath/ath11k/smart_ant_alg.h | 268 ++++++++++
 drivers/net/wireless/ath/ath11k/wmi.c           | 628 ++++++++++++++++++++++++
 drivers/net/wireless/ath/ath11k/wmi.h           | 148 ++++++
 14 files changed, 1635 insertions(+), 2 deletions(-)
 create mode 100644 drivers/net/wireless/ath/ath11k/smart_ant.h
 create mode 100644 drivers/net/wireless/ath/ath11k/smart_ant_alg.c
 create mode 100644 drivers/net/wireless/ath/ath11k/smart_ant_alg.h

Index: backports-20210222_001-5.4.89-b157d2276/drivers/net/wireless/ath/ath11k/Kconfig
===================================================================
--- backports-20210222_001-5.4.89-b157d2276.orig/drivers/net/wireless/ath/ath11k/Kconfig
+++ backports-20210222_001-5.4.89-b157d2276/drivers/net/wireless/ath/ath11k/Kconfig
@@ -93,3 +93,10 @@ config ATH11K_CFR
 	  Enable ath11k cfr dump support
 
 	  Say Y to enable access to collect cfr data dump via debugfs.
+
+config ATH11K_SMART_ANT_ALG
+	bool "Smart antenna algorithm support"
+	depends on ATH11K
+	default y
+	---help---
+	This option enables smart antenna algorithm.
Index: backports-20210222_001-5.4.89-b157d2276/drivers/net/wireless/ath/ath11k/Makefile
===================================================================
--- backports-20210222_001-5.4.89-b157d2276.orig/drivers/net/wireless/ath/ath11k/Makefile
+++ backports-20210222_001-5.4.89-b157d2276/drivers/net/wireless/ath/ath11k/Makefile
@@ -29,6 +29,7 @@ ath11k-$(CPTCFG_ATH11K_SPECTRAL) += spec
 ath11k-$(CPTCFG_ATH11K_PKTLOG) += pktlog.o
 ath11k-$(CPTCFG_ATH11K_NSS_SUPPORT) += nss.o
 ath11k-$(CPTCFG_ATH11K_CFR) += cfr.o
+ath11k-$(CPTCFG_ATH11K_SMART_ANT_ALG) += smart_ant_api.o
 
 obj-$(CPTCFG_ATH11K_AHB) += ath11k_ahb.o
 ath11k_ahb-y += ahb.o
Index: backports-20210222_001-5.4.89-b157d2276/drivers/net/wireless/ath/ath11k/core.c
===================================================================
--- backports-20210222_001-5.4.89-b157d2276.orig/drivers/net/wireless/ath/ath11k/core.c
+++ backports-20210222_001-5.4.89-b157d2276/drivers/net/wireless/ath/ath11k/core.c
@@ -58,6 +58,12 @@ module_param(ath11k_caldata_bin_path, ch
 MODULE_PARM_DESC(ath11k_caldata_bin_path,
 		"Caldata bin path for loading");
 
+bool ath11k_enable_smart_antenna = false;
+module_param_named(enable_smart_antenna, ath11k_enable_smart_antenna, uint,
+		   0644);
+MODULE_PARM_DESC(enable_smart_antenna, "Enable smart antenna supprot in fw");
+EXPORT_SYMBOL(ath11k_enable_smart_antenna);
+
 wait_queue_head_t ath11k_radio_prb_wq;
 EXPORT_SYMBOL(ath11k_radio_prb_wq);
 
Index: backports-20210222_001-5.4.89-b157d2276/drivers/net/wireless/ath/ath11k/core.h
===================================================================
--- backports-20210222_001-5.4.89-b157d2276.orig/drivers/net/wireless/ath/ath11k/core.h
+++ backports-20210222_001-5.4.89-b157d2276/drivers/net/wireless/ath/ath11k/core.h
@@ -28,6 +28,7 @@
 #include "rx_desc.h"
 #include "nss.h"
 #include "cfr.h"
+#include "smart_ant.h"
 
 extern unsigned int ath11k_skip_radio;
 extern wait_queue_head_t ath11k_radio_prb_wq;
@@ -471,6 +472,7 @@ struct ath11k_sta {
 	u8 rssi_comb;
 	struct ath11k_htt_tx_stats *tx_stats;
 	struct ath11k_rx_peer_stats *rx_stats;
+	struct ath11k_smart_ant_sta *smart_ant_sta;
 
 #ifdef CPTCFG_MAC80211_DEBUGFS
 	/* protected by conf_mutex */
@@ -790,6 +792,8 @@ struct ath11k {
 	u8 cfr_enabled;
 	bool ani_enabled;
 	enum wmi_phy_mode cfr_phymode;
+
+	struct ath11k_smart_ant_info smart_ant_info;
 };
 
 struct ath11k_band_cap {
@@ -1239,6 +1243,24 @@ enum ath11k_fw_recovery_option {
 	ATH11K_FW_RECOVERY_ENABLE_SSR_ONLY,
 };
 
+extern bool ath11k_enable_smart_antenna;
+
+static inline bool ath11k_smart_ant_enabled(struct ath11k *ar)
+{
+	if (!test_bit(WMI_TLV_SERVICE_SMART_ANTENNA_SW_SUPPORT,
+	    ar->ab->wmi_ab.svc_map))
+		return false;
+
+	if (!test_bit(WMI_TLV_SERVICE_SMART_ANTENNA_HW_SUPPORT,
+	    ar->ab->wmi_ab.svc_map))
+		return false;
+
+	if (!ath11k_enable_smart_antenna)
+		return false;
+
+	return true;
+}
+
 extern const struct ce_pipe_config ath11k_target_ce_config_wlan_ipq8074[];
 extern const struct service_to_pipe ath11k_target_service_to_ce_map_wlan_ipq8074[];
 extern const struct service_to_pipe ath11k_target_service_to_ce_map_wlan_ipq6018[];
Index: backports-20210222_001-5.4.89-b157d2276/drivers/net/wireless/ath/ath11k/debug.h
===================================================================
--- backports-20210222_001-5.4.89-b157d2276.orig/drivers/net/wireless/ath/ath11k/debug.h
+++ backports-20210222_001-5.4.89-b157d2276/drivers/net/wireless/ath/ath11k/debug.h
@@ -29,6 +29,7 @@ enum ath11k_debug_mask {
 	ATH11K_DBG_CFR		= 0x00008000,
 	ATH11K_DBG_CFR_DUMP	= 0x00010000,
 	ATH11K_DBG_PEER		= 0x00020000,
+	ATH11K_DBG_SMART_ANT	= 0x00040000,
 	ATH11K_DBG_ANY		= 0xffffffff,
 };
 
Index: backports-20210222_001-5.4.89-b157d2276/drivers/net/wireless/ath/ath11k/hw.c
===================================================================
--- backports-20210222_001-5.4.89-b157d2276.orig/drivers/net/wireless/ath/ath11k/hw.c
+++ backports-20210222_001-5.4.89-b157d2276/drivers/net/wireless/ath/ath11k/hw.c
@@ -156,6 +156,7 @@ static void ath11k_init_wmi_config_ipq80
 	config->ema_max_vap_cnt = ab->num_radios;
 	config->ema_max_profile_period = TARGET_EMA_MAX_PROFILE_PERIOD;
 	config->beacon_tx_offload_max_vdev += config->ema_max_vap_cnt;
+	config->smart_ant_cap = 1;
 
 }
 
Index: backports-20210222_001-5.4.89-b157d2276/drivers/net/wireless/ath/ath11k/mac.c
===================================================================
--- backports-20210222_001-5.4.89-b157d2276.orig/drivers/net/wireless/ath/ath11k/mac.c
+++ backports-20210222_001-5.4.89-b157d2276/drivers/net/wireless/ath/ath11k/mac.c
@@ -314,7 +314,7 @@ int ath11k_mac_hw_ratecode_to_legacy_rat
 	return -EINVAL;
 }
 
-static int get_num_chains(u32 mask)
+int get_num_chains(u32 mask)
 {
 	int num_chains = 0;
 
@@ -5158,6 +5158,13 @@ static int ath11k_mac_op_sta_state(struc
 		if (ret)
 			ath11k_warn(ar->ab, "Failed to associate station: %pM\n",
 				    sta->addr);
+
+		if (vif->type == NL80211_IFTYPE_AP &&
+		    ath11k_smart_ant_enabled(ar)) {
+			if (ath11k_smart_ant_sta_connect(ar, arvif, sta))
+				ath11k_warn(ar->ab, "Smart antenna station connect failed, disabling smart antenna for %pM\n",
+					    sta->addr);
+		}
 	} else if (old_state == IEEE80211_STA_ASSOC &&
 		   new_state == IEEE80211_STA_AUTHORIZED) {
 		spin_lock_bh(&ar->ab->base_lock);
@@ -5197,6 +5204,8 @@ static int ath11k_mac_op_sta_state(struc
 		   (vif->type == NL80211_IFTYPE_AP ||
 		    vif->type == NL80211_IFTYPE_MESH_POINT ||
 		    vif->type == NL80211_IFTYPE_ADHOC)) {
+		ath11k_smart_ant_sta_disconnect(ar, sta);
+
 		ret = ath11k_station_disassoc(ar, vif, sta);
 		if (ret)
 			ath11k_warn(ar->ab, "Failed to disassociate station: %pM\n",
@@ -7578,6 +7587,8 @@ ath11k_mac_update_vif_chan(struct ath11k
 	 * should be available for the channel switch now.
 	 */
 
+	ath11k_smart_ant_disable(arvif);
+
 	/* TODO: Update ar->rx_channel */
 
 	for (i = 0; i < n_vifs; i++) {
@@ -7793,6 +7804,21 @@ ath11k_mac_op_assign_vif_chanctx(struct
 		goto out;
 	}
 
+	ret = ath11k_smart_ant_enable(arvif);
+	if (ret) {
+		ath11k_warn(ab, "failed to enable smart antenna algorithm %d\n",
+			    ret);
+		goto out;
+	}
+
+	ret = ath11k_smart_ant_set_default(arvif);
+	if (ret) {
+		ath11k_warn(ab, "failed to set default smart antenna configuration %d\n",
+			    ret);
+		ath11k_smart_ant_disable(arvif);
+		goto out;
+	}
+
 	if (arvif->vdev_type != WMI_VDEV_TYPE_MONITOR && ar->monitor_vdev_created)
 		ath11k_mac_monitor_start(ar);
 
Index: backports-20210222_001-5.4.89-b157d2276/drivers/net/wireless/ath/ath11k/mac.h
===================================================================
--- backports-20210222_001-5.4.89-b157d2276.orig/drivers/net/wireless/ath/ath11k/mac.h
+++ backports-20210222_001-5.4.89-b157d2276/drivers/net/wireless/ath/ath11k/mac.h
@@ -142,6 +142,7 @@ int ath11k_mac_register(struct ath11k_ba
 int ath11k_mac_allocate(struct ath11k_base *ab);
 int ath11k_mac_hw_ratecode_to_legacy_rate(u8 hw_rc, u8 preamble, u8 *rateidx,
 					  u16 *rate);
+int get_num_chains(u32 mask);
 u8 ath11k_mac_bitrate_to_idx(const struct ieee80211_supported_band *sband,
 			     u32 bitrate);
 u8 ath11k_mac_hw_rate_to_idx(const struct ieee80211_supported_band *sband,
Index: backports-20210222_001-5.4.89-b157d2276/drivers/net/wireless/ath/ath11k/smart_ant.h
===================================================================
--- /dev/null
+++ backports-20210222_001-5.4.89-b157d2276/drivers/net/wireless/ath/ath11k/smart_ant.h
@@ -0,0 +1,73 @@
+/* SPDX-License-Identifier: BSD-3-Clause-Clear */
+/*
+ * Copyright (c) 2015, 2021 The Linux Foundation. All rights reserved.
+ *
+ * Permission to use, copy, modify, and/or distribute this software for
+ * any purpose with or without fee is hereby granted, provided that the
+ * above copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
+ * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ */
+
+#ifndef _SMART_ANT_H_
+#define _SMART_ANT_H_
+
+#include "smart_ant_api.h"
+
+/* In AP mode, this API notifies of disassociation of a station.
+ * Station specific information related to smart antenna should
+ * be reset in this API.
+ */
+static inline void
+ath11k_smart_ant_sta_disconnect(struct ath11k *ar, struct ieee80211_sta *sta)
+{
+	ath11k_smart_ant_alg_sta_disconnect(ar, sta);
+}
+
+/* In AP mode, this API is to notify of association of a station. Station
+ * specific information used for smart antenna may be initialized in this
+ * API. Peer specific smart antenna configuration in fw may need to be
+ * don from this API using ath11k_wmi_peer_cfg_smart_ant().
+ */
+static inline int
+ath11k_smart_ant_sta_connect(struct ath11k *ar, struct ath11k_vif *arvif,
+			     struct ieee80211_sta *sta)
+{
+	return ath11k_smart_ant_alg_sta_connect(ar, arvif, sta);
+}
+
+/* This API is to set initial tx/rx antennas */
+static inline int
+ath11k_smart_ant_set_default(struct ath11k_vif *arvif)
+{
+	return ath11k_smart_ant_alg_set_default(arvif);
+}
+
+/* This API reverts the configurations done in ath11k_smart_ant_enable().
+ * ath11k_wmi_pdev_disable_smart_ant needs to be called to disable
+ * smart antenna logic in fw.
+ */
+static inline void
+ath11k_smart_ant_disable(struct ath11k_vif *arvif)
+{
+	ath11k_smart_ant_alg_disable(arvif);
+}
+
+/* This smart antenna API configures fw with initial smart antenna params
+ * such as mode of antenna control and tx/rx antennas.
+ * This API calls ath11k_wmi_pdev_enable_smart_ant() to configure initial
+ * parameters for fw to start smart antenna. This API may also need to
+ * enable tx feedback through packetlog.
+ */
+static inline int
+ath11k_smart_ant_enable(struct ath11k_vif *arvif)
+{
+	return ath11k_smart_ant_alg_enable(arvif);
+}
+#endif
Index: backports-20210222_001-5.4.89-b157d2276/drivers/net/wireless/ath/ath11k/wmi.c
===================================================================
--- backports-20210222_001-5.4.89-b157d2276.orig/drivers/net/wireless/ath/ath11k/wmi.c
+++ backports-20210222_001-5.4.89-b157d2276/drivers/net/wireless/ath/ath11k/wmi.c
@@ -145,6 +145,8 @@ static const struct wmi_tlv_policy wmi_t
 		= { .min_len = sizeof(struct wmi_obss_color_collision_event) },
 	[WMI_TAG_WDS_ADDR_EVENT]
 		= { .min_len = sizeof(struct wmi_wds_addr_event) },
+	[WMI_TAG_PEER_RATECODE_LIST_EVENT]
+		= { .min_len = sizeof(struct wmi_peer_ratecode_list_fixed_param) },
 };
 
 #define PRIMAP(_hw_mode_) \
@@ -4378,6 +4380,7 @@ ath11k_wmi_copy_resource_config(struct w
 	wmi_cfg->host_service_flags &= ~(1 << WMI_RSRC_CFG_HOST_SERVICE_FLAG_REG_CC_EXT_SUPPORT_BIT);
 	wmi_cfg->host_service_flags |= tg_cfg->is_reg_cc_ext_event_supported <<
 				       WMI_RSRC_CFG_HOST_SERVICE_FLAG_REG_CC_EXT_SUPPORT_BIT;
+	wmi_cfg->smart_ant_cap = 1;
 }
 
 static int ath11k_init_cmd_send(struct ath11k_pdev_wmi *wmi,
@@ -9779,6 +9782,165 @@ static void ath11k_wmi_parse_cfr_capture
 			   "failed to process cfr cpature ret = %d\n", ret);
 }
 
+static int ath11k_wmi_peer_ratecode_subtlv_parser(struct ath11k_base *ab,
+						  u16 tag, u16 len,
+						  const void *ptr, void *data)
+{
+	struct wmi_peer_cck_ofdm_rate_info *ofdm_rate;
+	struct wmi_peer_mcs_rate_info *mcs_rate;
+	struct ath11k_peer_rate_code_list_cap *rate_cap = data;
+	int ret = 0;
+	static int i = 0, j = 0;
+
+	switch (tag) {
+	case WMI_TAG_PEER_CCK_OFDM_RATE_INFO:
+		ofdm_rate = (struct wmi_peer_cck_ofdm_rate_info *)ptr;
+		if (i == ATH11K_SMART_ANT_LEGACY_RATE_WORDS)
+			i = 0;
+		rate_cap->rtcode_legacy[i] = ofdm_rate->ratecode_legacy;
+		i++;
+		break;
+	case WMI_TAG_PEER_MCS_RATE_INFO:
+		mcs_rate = (struct wmi_peer_mcs_rate_info *)ptr;
+		if (j == ATH11K_SMART_ANT_MAX_HT_RATE_WORDS)
+			j = 0;
+		rate_cap->rtcode_20[j] = mcs_rate->rt_code_20;
+		rate_cap->rtcode_40[j] = mcs_rate->rt_code_40;
+		rate_cap->rtcode_80[j] = mcs_rate->rt_code_80;
+		j++;
+		break;
+	default:
+		ath11k_warn(ab,
+			    "Received invalid tag for wmi peer ratecode in subtlvs\n");
+		return -EINVAL;
+		break;
+	}
+
+	return ret;
+}
+
+static int ath11k_wmi_peer_ratecode_event_parser(struct ath11k_base *ab,
+						 u16 tag, u16 len,
+						 const void *ptr, void *data)
+{
+	int ret = 0;
+
+	ath11k_dbg(ab, ATH11K_DBG_WMI, "wmi peer ratecode event tag 0x%x of len %d rcvd\n",
+		   tag, len);
+
+	switch (tag) {
+	case WMI_TAG_PEER_RATECODE_LIST_EVENT:
+		/* Fixed param is already processed*/
+		break;
+	case WMI_TAG_ARRAY_STRUCT:
+		 /* len 0 is expected for array of struct when there
+		  * is no content of that type to pack inside that tlv
+		  */
+		if (len == 0)
+			return 0;
+		ret = ath11k_wmi_tlv_iter(ab, ptr, len,
+					  ath11k_wmi_peer_ratecode_subtlv_parser,
+					  data);
+		break;
+	default:
+		ath11k_warn(ab, "Received invalid tag for wmi peer ratecode event\n");
+		ret = -EINVAL;
+		break;
+	}
+
+	return ret;
+}
+
+static void ath11k_wmi_event_peer_ratecode_list(struct ath11k_base *ab,
+						struct sk_buff *skb)
+{
+	const struct wmi_peer_ratecode_list_fixed_param *fixed_param;
+	const struct wmi_tlv *tlv;
+	struct ath11k_peer *peer = NULL;
+	struct ieee80211_sta *sta;
+	struct ath11k_sta *arsta;
+	u16 tlv_tag;
+	u8 *ptr;
+	int ret;
+
+	ptr = skb->data;
+	if (skb->len < (sizeof(*fixed_param) + TLV_HDR_SIZE)) {
+		ath11k_warn(ab, "peer ratecode list event size invalid\n");
+		return;
+	}
+
+	tlv = (struct wmi_tlv *)ptr;
+	tlv_tag = FIELD_GET(WMI_TLV_TAG, tlv->header);
+	ptr += sizeof(*tlv);
+
+	if (tlv_tag == WMI_TAG_PEER_RATECODE_LIST_EVENT) {
+		fixed_param = (struct wmi_peer_ratecode_list_fixed_param *)ptr;
+
+		ath11k_dbg(ab, ATH11K_DBG_WMI,
+			   "pdev peer ratecode list on pdev: %d of peer: %pM ratecount: %d\n",
+			   fixed_param->pdev_id, fixed_param->macaddr.addr, fixed_param->ratecount);
+	} else {
+		ath11k_warn(ab, "peer ratecode list event received with wrong tag\n");
+		return;
+	}
+
+	rcu_read_lock();
+	spin_lock_bh(&ab->base_lock);
+
+	peer = ath11k_peer_find_by_addr(ab, fixed_param->macaddr.addr);
+	if (!peer) {
+		ath11k_warn(ab, "peer not found %pM\n", fixed_param->macaddr.addr);
+		spin_unlock_bh(&ab->base_lock);
+		rcu_read_unlock();
+		return;
+	}
+
+ 	sta = peer->sta;
+
+ 	if (!sta) {
+ 		ath11k_warn(ab, "failed to find station entry %pM\n",
+ 			    fixed_param->macaddr.addr);
+		spin_unlock_bh(&ab->base_lock);
+		rcu_read_unlock();
+ 		return;
+ 	}
+
+ 	arsta = (struct ath11k_sta *)sta->drv_priv;
+
+	spin_unlock_bh(&ab->base_lock);
+	rcu_read_unlock();
+
+	if (!arsta) {
+		ath11k_warn(ab, "arsta is null \n");
+		return;
+ 	}
+
+	if (!arsta->smart_ant_sta) {
+		ath11k_warn(ab, "arsta->smart_ant_sta is null \n");
+ 		return;
+ 	}
+
+	ret = ath11k_wmi_tlv_iter(ab, skb->data, skb->len,
+				  ath11k_wmi_peer_ratecode_event_parser,
+				  &arsta->smart_ant_sta->rate_cap);
+	if (ret) {
+		ath11k_warn(ab, "failed to parse cck ofdm_rate tlv %d\n", ret);
+		return;
+	}
+
+	ret = ath11k_wmi_tlv_iter(ab, skb->data, skb->len,
+				  ath11k_wmi_peer_ratecode_event_parser,
+				  &arsta->smart_ant_sta->rate_cap);
+	if (ret) {
+		ath11k_warn(ab, "failed to parse mcs_rate tlv %d\n", ret);
+		return;
+	}
+
+	ether_addr_copy(arsta->smart_ant_sta->mac_addr, fixed_param->macaddr.addr);
+
+	return;
+}
+
 static void ath11k_wmi_tlv_op_rx(struct ath11k_base *ab, struct sk_buff *skb)
 {
 	struct wmi_cmd_hdr *cmd_hdr;
@@ -9943,6 +10105,9 @@ static void ath11k_wmi_tlv_op_rx(struct
 	case WMI_PDEV_ANI_OFDM_LEVEL_EVENTID:
 		ath11k_wmi_event_ani_ofdm_level(ab, skb);
 		break;
+	case WMI_PEER_RATECODE_LIST_EVENTID:
+		ath11k_wmi_event_peer_ratecode_list(ab, skb);
+		break;
 	/* TODO: Add remaining events */
 	default:
 		ath11k_dbg(ab, ATH11K_DBG_WMI, "Unknown eventid: 0x%x\n", id);
@@ -10267,3 +10432,362 @@ int ath11k_wmi_wow_enable(struct ath11k
 
 	return ath11k_wmi_cmd_send(ar->wmi, skb, WMI_WOW_ENABLE_CMDID);
 }
+
+int ath11k_wmi_pdev_set_rx_ant(struct ath11k *ar, u32 rx_antenna)
+{
+	struct ath11k_pdev_wmi *wmi = ar->wmi;
+	struct wmi_pdev_set_rx_antenna_cmd *cmd;
+	struct sk_buff *skb;
+	void *ptr;
+	int ret, len;
+
+	len = sizeof(*cmd);
+
+	skb = ath11k_wmi_alloc_skb(wmi->wmi_ab, len);
+	if (!skb)
+		return -ENOMEM;
+
+	ptr = skb->data;
+
+	cmd = ptr;
+	cmd->tlv_header = FIELD_PREP(WMI_TLV_TAG,
+				     WMI_TAG_PDEV_SMART_ANT_SET_RX_ANTENNA_CMD) |
+			  FIELD_PREP(WMI_TLV_LEN, sizeof(*cmd) - TLV_HDR_SIZE);
+	cmd->rx_antenna = rx_antenna;
+	cmd->pdev_id = ar->pdev->pdev_id;
+
+	ret = ath11k_wmi_cmd_send(wmi, skb, WMI_PDEV_SMART_ANT_SET_RX_ANTENNA_CMDID);
+	if (ret) {
+		ath11k_warn(ar->ab, "failed to submit WMI_PDEV_SMART_ANT_SET_RX_ANTENNA_CMDID\n");
+		dev_kfree_skb(skb);
+	}
+
+	ath11k_dbg(ar->ab, ATH11K_DBG_WMI, "WMI pdev rx set smart antenna pdev_id %d rx_antenna: %d\n",
+		   ar->pdev->pdev_id, rx_antenna);
+
+	return ret;
+}
+
+int ath11k_wmi_peer_set_smart_tx_ant(struct ath11k *ar,
+				     u32 vdev_id, const u8 *macaddr,
+				     const u32 *tx_antenna)
+{
+	struct ath11k_pdev_wmi *wmi = ar->wmi;
+	struct wmi_pdev_set_tx_antenna_cmd *cmd;
+	struct wmi_peer_set_smart_tx_ant_series_cmd *tx_ant_series;
+	struct wmi_tlv *tlv;
+	struct sk_buff *skb;
+	void *ptr;
+	int i, ret, len;
+
+	len = sizeof(*cmd) + WMI_TLV_HDR_SIZE;
+	len += WMI_SMART_MAX_RATE_SERIES *
+	       sizeof(struct wmi_peer_set_smart_tx_ant_series_cmd);
+
+	skb = ath11k_wmi_alloc_skb(wmi->wmi_ab, len);
+	if (!skb)
+		return -ENOMEM;
+
+	ptr = skb->data;
+
+	cmd = ptr;
+	cmd->tlv_header = FIELD_PREP(WMI_TLV_TAG,
+				     WMI_TAG_PEER_SMART_ANT_SET_TX_ANTENNA_CMD) |
+			  FIELD_PREP(WMI_TLV_LEN, sizeof(*cmd) - TLV_HDR_SIZE);
+	cmd->vdev_id = vdev_id;
+	ether_addr_copy(cmd->macaddr.addr, macaddr);
+
+	ptr = skb->data + sizeof(*cmd);
+
+	len = WMI_SMART_MAX_RATE_SERIES *
+	      sizeof(struct wmi_peer_set_smart_tx_ant_series_cmd);
+
+	tlv = ptr;
+	tlv->header = FIELD_PREP(WMI_TLV_TAG, WMI_TAG_ARRAY_STRUCT) |
+		      FIELD_PREP(WMI_TLV_LEN, len);
+	ptr += TLV_HDR_SIZE;
+
+	tx_ant_series = ptr;
+
+	for (i = 0; i < WMI_SMART_MAX_RATE_SERIES; i++) {
+		tx_ant_series->tlv_header =
+			FIELD_PREP(WMI_TLV_TAG,
+				   WMI_TAG_PEER_SMART_ANT_SET_TX_ANTENNA_SERIES) |
+			FIELD_PREP(WMI_TLV_LEN, len - TLV_HDR_SIZE);
+		tx_ant_series->ant_series = tx_antenna[i];
+		tx_ant_series++;
+	}
+
+	ret = ath11k_wmi_cmd_send(wmi, skb, WMI_PEER_SMART_ANT_SET_TX_ANTENNA_CMDID);
+	if (ret) {
+		ath11k_warn(ar->ab,
+			    "failed to send WMI_PEER_SMART_ANT_SET_TX_ANTENNA_CMDID\n");
+		dev_kfree_skb(skb);
+	}
+
+	ath11k_dbg(ar->ab, ATH11K_DBG_WMI, "WMI peer set tx smart antenna peer %pM\n",
+		   macaddr);
+
+	return ret;
+}
+
+int
+ath11k_wmi_pdev_disable_smart_ant(struct ath11k *ar,
+				  struct ath11k_smart_ant_info *info)
+{
+	struct ath11k_pdev_wmi *wmi = ar->wmi;
+	struct wmi_pdev_set_smart_ant_cmd *cmd;
+	struct wmi_pdev_smart_ant_gpio_handle_cmd *gpio_param;
+	struct wmi_tlv *tlv;
+	struct sk_buff *skb;
+	void *ptr;
+	int i, ret, len;
+
+	len = sizeof(*cmd) + TLV_HDR_SIZE +
+	      WMI_SMART_ANTENNA_HAL_MAX * sizeof(*gpio_param);
+
+	skb = ath11k_wmi_alloc_skb(wmi->wmi_ab, len);
+	if (!skb)
+		return -ENOMEM;
+
+	ptr = skb->data;
+
+	cmd = ptr;
+	cmd->tlv_header = FIELD_PREP(WMI_TLV_TAG,
+				     WMI_TAG_PDEV_SMART_ANT_ENABLE_CMD) |
+			  FIELD_PREP(WMI_TLV_LEN, sizeof(*cmd) - TLV_HDR_SIZE);
+	cmd->pdev_id = ar->pdev->pdev_id;
+	cmd->mode = 0;
+	cmd->enable = info->enabled;
+	cmd->rx_antenna = 0;
+	cmd->tx_default_antenna = 0;
+
+	ptr = skb->data + sizeof(*cmd);
+
+	len = WMI_SMART_ANTENNA_HAL_MAX * sizeof(*gpio_param);
+
+	tlv = ptr;
+	tlv->header = FIELD_PREP(WMI_TLV_TAG, WMI_TAG_ARRAY_STRUCT) |
+		      FIELD_PREP(WMI_TLV_LEN, len);
+	ptr += TLV_HDR_SIZE;
+	gpio_param = ptr;
+
+	for (i = 0; i < WMI_SMART_ANTENNA_HAL_MAX; i++) {
+		gpio_param->tlv_header = FIELD_PREP(WMI_TLV_TAG,
+						    WMI_TAG_PDEV_SMART_ANT_GPIO_HANDLE) |
+					 FIELD_PREP(WMI_TLV_LEN, len - TLV_HDR_SIZE);
+
+		/* Set back the gpio pin and func values to 0 for ath11k chipsets. */
+
+		gpio_param->gpio_pin = 0;
+		gpio_param->gpio_func = 0;
+		gpio_param->pdev_id = ar->pdev->pdev_id;
+		gpio_param++;
+	}
+
+	ret = ath11k_wmi_cmd_send(wmi, skb, WMI_PDEV_SMART_ANT_ENABLE_CMDID);
+	if (ret) {
+		ath11k_warn(ar->ab,
+			    "failed to send WMI_PDEV_SMART_ANT_ENABLE_CMDID\n");
+		dev_kfree_skb(skb);
+	}
+
+	return ret;
+}
+
+int
+ath11k_wmi_peer_set_smart_ant_node_config(struct ath11k *ar,
+					  u8 mac_addr[ETH_ALEN],
+					  struct ath11k_smart_ant_node_config_params *param)
+{
+	struct ath11k_pdev_wmi *wmi = ar->wmi;
+	struct wmi_peer_set_smart_ant_node_config_ops_cmd *cmd;
+	struct wmi_tlv *tlv;
+	struct sk_buff *skb;
+	void *ptr;
+	int ret, len, args_tlv_len;
+	u32 *node_config_args;
+
+	args_tlv_len = TLV_HDR_SIZE + param->arg_count * sizeof(u32);
+	len = sizeof(*cmd) + args_tlv_len;
+
+	if (param->arg_count == 0) {
+		ath11k_warn(ar->ab, "Argument count is 0\n");
+		return -EINVAL;
+	}
+
+	skb = ath11k_wmi_alloc_skb(wmi->wmi_ab, len);
+	if (!skb)
+		return -ENOMEM;
+
+	cmd = (struct wmi_peer_set_smart_ant_node_config_ops_cmd *)skb->data;
+	cmd->tlv_header = FIELD_PREP(WMI_TLV_TAG,
+				     WMI_TAG_PEER_SMART_ANT_SET_NODE_CONFIG_OPS_CMD) |
+			  FIELD_PREP(WMI_TLV_LEN, sizeof(*cmd) - TLV_HDR_SIZE);
+	cmd->vdev_id = param->vdev_id;
+	cmd->args_count = param->arg_count;
+	cmd->cmd_id = param->cmd_id;
+	ether_addr_copy(cmd->mac_addr.addr, mac_addr);
+
+	ptr = skb->data + sizeof(struct wmi_peer_set_smart_ant_node_config_ops_cmd);
+
+	tlv = ptr;
+	tlv->header = FIELD_PREP(WMI_TLV_TAG, WMI_TAG_ARRAY_UINT32) |
+		      FIELD_PREP(WMI_TLV_LEN,  param->arg_count * sizeof(u32));
+
+	ptr += TLV_HDR_SIZE;
+
+	node_config_args = (u32 *)ptr;
+
+	node_config_args = param->arg_arr;
+
+	ret = ath11k_wmi_cmd_send(wmi, skb,
+				  WMI_PEER_SMART_ANT_SET_NODE_CONFIG_OPS_CMDID);
+	if (ret) {
+		ath11k_warn(ar->ab, "failed to send WMI_PEER_SMART_ANT_SET_NODE_CONFIG_OPS CMD :%d\n",
+			    ret);
+		dev_kfree_skb(skb);
+	}
+
+	ath11k_dbg(ar->ab, ATH11K_DBG_WMI,
+		   "WMI peer smart ant set node config ops: vdev_id: %d n_args: %d\n",
+		   cmd->vdev_id, cmd->args_count);
+
+	return ret;
+}
+
+int
+ath11k_wmi_peer_set_smart_ant_train_info(struct ath11k *ar,
+					 u32 vdev_id,
+					 u8 mac_addr[ETH_ALEN],
+					 struct ath11k_smart_ant_train_info *param)
+{
+	struct ath11k_pdev_wmi *wmi = ar->wmi;
+	struct wmi_peer_set_smart_ant_train_ant_fixed_param_cmd *cmd;
+	struct wmi_peer_set_smart_ant_train_ant_param *train_param;
+	struct wmi_tlv *tlv;
+	struct sk_buff *skb;
+	void *ptr;
+	int i, ret, len, itr = 0;
+
+	len = sizeof(*cmd) + WMI_TLV_HDR_SIZE;
+	len += WMI_SMART_MAX_RATE_SERIES *
+	       sizeof(struct wmi_peer_set_smart_ant_train_ant_param);
+
+	skb = ath11k_wmi_alloc_skb(wmi->wmi_ab, len);
+	if (!skb)
+		return -ENOMEM;
+
+	ptr = skb->data;
+
+	cmd = ptr;
+	cmd->tlv_header = FIELD_PREP(WMI_TLV_TAG,
+				     WMI_TAG_PEER_SMART_ANT_SET_TRAIN_ANTENNA_CMD) |
+			  FIELD_PREP(WMI_TLV_LEN, sizeof(*cmd) - TLV_HDR_SIZE);
+	cmd->vdev_id = vdev_id;
+	ether_addr_copy(cmd->macaddr.addr, mac_addr);
+	cmd->numpkts = param->numpkts;
+
+	ptr = skb->data + sizeof(*cmd);
+
+	len = WMI_SMART_MAX_RATE_SERIES *
+	      sizeof(struct wmi_peer_set_smart_ant_train_ant_param);
+
+	tlv = ptr;
+	tlv->header = FIELD_PREP(WMI_TLV_TAG, WMI_TAG_ARRAY_STRUCT) |
+		      FIELD_PREP(WMI_TLV_LEN, len);
+	ptr += TLV_HDR_SIZE;
+
+	train_param = ptr;
+
+	for (i = 0; i < WMI_SMART_MAX_RATE_SERIES; i++) {
+		train_param->tlv_header =
+			FIELD_PREP(WMI_TLV_TAG,
+				   WMI_TAG_PEER_SMART_ANT_SET_TRAIN_ANTENNA_PARAM) |
+			FIELD_PREP(WMI_TLV_LEN, len - TLV_HDR_SIZE);
+		train_param->train_rate_series_lo =
+			((param->rate_array[itr] & ATH11K_SMART_ANT_MASK_RCODE) |
+			 (param->rate_array[itr] & (ATH11K_SMART_ANT_MASK_RCODE << 16)));
+		train_param->train_rate_series_hi =
+			((param->rate_array[itr + 1] & ATH11K_SMART_ANT_MASK_RCODE) |
+			 (param->rate_array[itr + 1] & (ATH11K_SMART_ANT_MASK_RCODE << 16)));
+		itr += 2;
+		train_param->train_antenna_series = param->antenna_array[i];
+		train_param->rc_flags = 0;
+		train_param++;
+	}
+
+	ret = ath11k_wmi_cmd_send(wmi, skb, WMI_PEER_SMART_ANT_SET_TRAIN_INFO_CMDID);
+	if (ret) {
+		ath11k_warn(ar->ab,
+			    "failed to send WMI_PEER_SMART_ANT_SET_TRAIN_INFO_CMDID\n");
+		dev_kfree_skb(skb);
+	}
+
+	return ret;
+}
+
+int
+ath11k_wmi_pdev_enable_smart_ant(struct ath11k *ar,
+				 struct ath11k_smart_ant_info *info)
+{
+	struct ath11k_pdev_wmi *wmi = ar->wmi;
+	struct wmi_pdev_set_smart_ant_cmd *cmd;
+	struct wmi_pdev_smart_ant_gpio_handle_cmd *gpio_param;
+	struct wmi_tlv *tlv;
+	struct sk_buff *skb;
+	void *ptr;
+	int i;
+	int ret, len;
+
+	len = sizeof(*cmd) + TLV_HDR_SIZE +
+	      WMI_SMART_ANTENNA_HAL_MAX * sizeof(*gpio_param);
+
+	skb = ath11k_wmi_alloc_skb(wmi->wmi_ab, len);
+	if (!skb)
+		return -ENOMEM;
+
+	ptr = skb->data;
+
+	cmd = ptr;
+	cmd->tlv_header = FIELD_PREP(WMI_TLV_TAG,
+				     WMI_TAG_PDEV_SMART_ANT_ENABLE_CMD) |
+			  FIELD_PREP(WMI_TLV_LEN, sizeof(*cmd) - TLV_HDR_SIZE);
+	cmd->pdev_id = ar->pdev->pdev_id;
+	cmd->mode = WMI_SMART_ANT_MODE_PARALLEL;
+	cmd->enable = info->enabled;
+	cmd->rx_antenna = info->default_ant;
+	cmd->tx_default_antenna = info->default_ant;
+
+	ptr = skb->data + sizeof(*cmd);
+
+	len = WMI_SMART_ANTENNA_HAL_MAX * sizeof(*gpio_param);
+
+	tlv = ptr;
+	tlv->header = FIELD_PREP(WMI_TLV_TAG, WMI_TAG_ARRAY_STRUCT) |
+		      FIELD_PREP(WMI_TLV_LEN, len);
+	ptr += TLV_HDR_SIZE;
+
+	gpio_param = ptr;
+
+	for (i = 0; i < WMI_SMART_ANTENNA_HAL_MAX; i++) {
+		gpio_param->tlv_header = FIELD_PREP(WMI_TLV_TAG,
+						    WMI_TAG_PDEV_SMART_ANT_GPIO_HANDLE) |
+					 FIELD_PREP(WMI_TLV_LEN, len - TLV_HDR_SIZE);
+
+		/* Set the gpio pin and func values to 0 for ath11k chipsets. */
+
+		gpio_param->gpio_pin = 0;
+		gpio_param->gpio_func = 0;
+		gpio_param->pdev_id = ar->pdev->pdev_id;
+		gpio_param++;
+	}
+
+	ret = ath11k_wmi_cmd_send(wmi, skb, WMI_PDEV_SMART_ANT_ENABLE_CMDID);
+	if (ret) {
+		ath11k_warn(ar->ab,
+			    "failed to send WMI_PDEV_SMART_ANT_ENABLE_CMDID\n");
+		dev_kfree_skb(skb);
+	}
+	return ret;
+}
Index: backports-20210222_001-5.4.89-b157d2276/drivers/net/wireless/ath/ath11k/wmi.h
===================================================================
--- backports-20210222_001-5.4.89-b157d2276.orig/drivers/net/wireless/ath/ath11k/wmi.h
+++ backports-20210222_001-5.4.89-b157d2276/drivers/net/wireless/ath/ath11k/wmi.h
@@ -11,6 +11,10 @@
 
 struct ath11k_base;
 struct ath11k;
+struct ath11k_vif;
+struct ath11k_smart_ant_info;
+struct ath11k_smart_ant_node_config_params;
+struct ath11k_smart_ant_train_info;
 struct ath11k_fw_stats;
 
 #define PSOC_HOST_MAX_NUM_SS (8)
@@ -6633,6 +6637,101 @@ struct wmi_wow_ev_arg {
 	u32 data_len;
 };
 
+/*Smart antenna related defs */
+
+#define WMI_SMART_ANT_MODE_SERIAL        0
+#define WMI_SMART_ANT_MODE_PARALLEL      1
+#define WMI_SMART_ANTENNA_HAL_MAX        4
+#define WMI_SMART_ANT_MAX_SERIAL_ANTENNA 2
+#define WMI_SMART_MAX_RATE_SERIES        2
+
+#define WMI_CCK_OFDM_RATES_MAX           12
+#define WMI_MCS_RATES_MAX                96
+#define WMI_RATE_COUNT_MAX               4
+
+struct wmi_peer_ratecode_list_fixed_param {
+	struct wmi_mac_addr macaddr;
+	u32 ratecount;
+	u32 vdev_id;
+	u32 pdev_id;
+} __packed;
+
+struct wmi_peer_cck_ofdm_rate_info {
+	u32 ratecode_legacy;
+} __packed;
+
+struct wmi_peer_mcs_rate_info {
+	u32 rt_code_20;
+	u32 rt_code_40;
+	u32 rt_code_80;
+} __packed;
+
+struct wmi_pdev_set_smart_ant_cmd {
+	u32 tlv_header;
+	union {
+		u32 mac_id;
+		u32 pdev_id;
+	};
+	u32 enable;
+	u32 mode;
+	u32 rx_antenna;
+	u32 tx_default_antenna;
+} __packed;
+
+struct wmi_pdev_smart_ant_gpio_handle_cmd {
+	u32 tlv_header;
+	u32 gpio_pin;
+	u32 gpio_func;
+	u32 pdev_id;
+} __packed;
+
+struct wmi_pdev_set_rx_antenna_cmd {
+	u32 tlv_header;
+	union {
+		u32 mac_id;
+		u32 pdev_id;
+	};
+	u32 rx_antenna;
+} __packed;
+
+struct wmi_pdev_set_tx_antenna_cmd {
+	u32 tlv_header;
+	u32 vdev_id;
+	struct wmi_mac_addr macaddr;
+} __packed;
+
+struct wmi_peer_set_smart_tx_ant_series_cmd {
+	u32 tlv_header;
+	u32 ant_series;
+} __packed;
+
+struct wmi_peer_set_smart_ant_train_ant_fixed_param_cmd {
+	u32 tlv_header;
+	u32 vdev_id;
+	struct wmi_mac_addr macaddr;
+	u32 numpkts;
+} __packed;
+
+struct wmi_peer_set_smart_ant_train_ant_param {
+	u32 tlv_header;
+	union {
+		u32 train_rate_series;
+		u32 train_rate_series_lo;
+	};
+	u32 train_antenna_series;
+	/* Rate control flags for future use */
+	u32 rc_flags;
+	u32 train_rate_series_hi;
+} __packed;
+
+struct wmi_peer_set_smart_ant_node_config_ops_cmd {
+	u32 tlv_header;
+	u32 vdev_id;
+	struct wmi_mac_addr mac_addr;
+	u32 cmd_id;
+	u32 args_count;
+} __packed;
+
 int ath11k_wmi_cmd_send(struct ath11k_pdev_wmi *wmi, struct sk_buff *skb,
 			u32 cmd_id);
 struct sk_buff *ath11k_wmi_alloc_skb(struct ath11k_wmi_base *wmi_sc, u32 len);
@@ -6806,4 +6905,22 @@ int ath11k_wmi_peer_set_cfr_capture_conf
 					 u32 vdev_id, const u8 *mac,
 					 struct wmi_peer_cfr_capture_conf_arg *arg);
 int ath11k_wmi_pdev_get_ani_level(struct ath11k *ar, u32 param_id, u8 pdev_id);
+int ath11k_wmi_pdev_enable_smart_ant(struct ath11k *ar,
+				     struct ath11k_smart_ant_info *info);
+int ath11k_wmi_pdev_disable_smart_ant(struct ath11k *ar,
+				      struct ath11k_smart_ant_info *info);
+int ath11k_wmi_peer_set_smart_tx_ant(struct ath11k *ar, u32 vdev_id,
+				     const u8 *macaddr, const u32 *tx_antenna);
+int ath11k_wmi_pdev_set_rx_ant(struct ath11k *ar, u32 antenna);
+int
+ath11k_wmi_peer_set_smart_ant_node_config(struct ath11k *ar, u8 *mac,
+					  struct ath11k_smart_ant_node_config_params *param);
+int
+ath11k_wmi_peer_set_smart_ant_train_info(struct ath11k *ar, u32 vdev_id,
+					 u8 *mac,
+					 struct ath11k_smart_ant_train_info *param);
+int
+ath11k_wmi_peer_set_smart_ant_train_ant_param_cmd(struct ath11k *ar,
+						  u32 vdev_id, const u8 *macaddr,
+						  const struct wmi_peer_set_smart_ant_train_ant_fixed_param_cmd *arg);
 #endif
Index: backports-20210222_001-5.4.89-b157d2276/local-symbols
===================================================================
--- backports-20210222_001-5.4.89-b157d2276.orig/local-symbols
+++ backports-20210222_001-5.4.89-b157d2276/local-symbols
@@ -141,3 +141,4 @@ ATH11K_TRACING=
 ATH11K_SPECTRAL=
 ATH11K_PKTLOG=
 ATH11K_CFR=
+ATH11K_SMART_ANT_ALG=
Index: backports-20210222_001-5.4.89-b157d2276/drivers/net/wireless/ath/ath11k/smart_ant_api.c
===================================================================
--- /dev/null
+++ backports-20210222_001-5.4.89-b157d2276/drivers/net/wireless/ath/ath11k/smart_ant_api.c
@@ -0,0 +1,280 @@
+/* SPDX-License-Identifier: BSD-3-Clause-Clear */
+/*
+ * Copyright (c) 2015, 2021 The Linux Foundation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted (subject to the limitations in the
+ * disclaimer below) provided that the following conditions are met:
+ *
+ * Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ *
+ * Redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the
+ * distribution.
+ *
+ * Neither the name of  The Linux Foundation nor the names of its
+ * contributors may be used to endorse or promote products derived
+ * from this software without specific prior written permission.
+
+ * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
+ * GRANTED BY THIS LICENSE.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
+ * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "debug.h"
+#include "wmi.h"
+#include "smart_ant.h"
+
+static int smart_ant_alg_get_streams(u32 nss)
+{
+	u32 num_chains = 0, supp_tx_chainmask = (1 << nss) - 1;
+	int i;
+
+	for (i = 0; i < ATH11K_SMART_ANT_MAX_CHAINS; i++) {
+		if (supp_tx_chainmask & (1 << i))
+			num_chains++;
+	}
+
+	return min(num_chains, nss);
+}
+
+static void smart_ant_alg_init_param(struct ath11k *ar)
+{
+	struct ath11k_smart_ant_info *info = &ar->smart_ant_info;
+	struct ath11k_smart_ant_params *sa_params =
+					&ar->smart_ant_info.smart_ant_params;
+	u32 nss;
+
+	nss = get_num_chains(ar->cfg_tx_chainmask) ? : 1;
+	info->mode = WMI_SMART_ANT_MODE_PARALLEL;
+	info->default_ant = ATH11K_SMART_ANT_DEFAULT_ANT;
+	info->num_fallback_rate = ATH11K_SMART_ANT_FALLBACK_RATE_DEFAULT;
+	info->txrx_feedback = ATH11K_SMART_ANT_TX_FEEDBACK |
+			      ATH11K_SMART_ANT_RX_FEEDBACK;
+
+	sa_params->low_rate_threshold  	= ATH11K_SMART_ANT_PER_MIN_THRESHOLD;
+	sa_params->hi_rate_threshold 	= ATH11K_SMART_ANT_PER_MAX_THRESHOLD;
+	sa_params->per_diff_threshold	= ATH11K_SMART_ANT_PER_DIFF_THRESHOLD;
+	sa_params->num_train_pkts	= 0;
+	sa_params->pkt_len		= ATH11K_SMART_ANT_PKT_LEN_DEFAULT;
+	sa_params->num_tx_ant_comb	= 1 << smart_ant_alg_get_streams(nss);
+	sa_params->num_min_pkt		= ATH11K_SMART_ANT_NUM_PKT_MIN;
+	sa_params->retrain_interval	= msecs_to_jiffies(
+						ATH11K_SMART_ANT_RETRAIN_INTVL);
+	sa_params->perf_train_interval	= msecs_to_jiffies(
+						ATH11K_SMART_ANT_PERF_TRAIN_INTVL);
+	sa_params->max_perf_delta	= ATH11K_SMART_ANT_TPUT_DELTA_DEFAULT;
+	sa_params->hysteresis		= ATH11K_SMART_ANT_HYSTERISYS_DEFAULT;
+	sa_params->min_goodput_threshold =
+				ATH11K_SMART_ANT_MIN_GOODPUT_THRESHOLD;
+	sa_params->avg_goodput_interval	= ATH11K_SMART_ANT_GOODPUT_INTVL_AVG;
+	sa_params->ignore_goodput_interval =
+				ATH11K_SMART_ANT_IGNORE_GOODPUT_INTVL;
+	sa_params->num_pretrain_pkts = ATH11K_SMART_ANT_PRETRAIN_PKTS_MAX;
+	sa_params->num_other_bw_pkts_threshold = ATH11K_SMART_ANT_BW_THRESHOLD;
+	sa_params->enabled_train = ATH11K_SMART_ANT_TRAIN_INIT |
+				   ATH11K_SMART_ANT_TRAIN_TRIGGER_PERIODIC |
+				   ATH11K_SMART_ANT_TRAIN_TRIGGER_PERF |
+				   ATH11K_SMART_ANT_TRAIN_TRIGGER_RX;
+	sa_params->num_pkt_min_threshod[ATH11K_SMART_ANT_BW_20] =
+				ATH11K_SMART_ANT_NUM_PKT_THRESHOLD_20;
+	sa_params->num_pkt_min_threshod[ATH11K_SMART_ANT_BW_40] =
+				ATH11K_SMART_ANT_NUM_PKT_THRESHOLD_40;
+	sa_params->num_pkt_min_threshod[ATH11K_SMART_ANT_BW_80] =
+				ATH11K_SMART_ANT_NUM_PKT_THRESHOLD_80;
+	sa_params->default_tx_ant	= ATH11K_SMART_ANT_DEFAULT_ANT;
+	sa_params->ant_change_ind	= 0;
+	sa_params->max_train_ppdu	= ATH11K_SMART_ANT_NUM_TRAIN_PPDU_MAX;
+	sa_params->num_rx_chain		= nss;
+	if (nss > ATH11K_SMART_ANT_MAX_RX_CHAIN)
+		sa_params->num_rx_chain = ATH11K_SMART_ANT_MAX_RX_CHAIN;
+}
+
+void ath11k_smart_ant_alg_sta_disconnect(struct ath11k *ar,
+					 struct ieee80211_sta *sta)
+{
+	struct ath11k_sta *arsta = (struct ath11k_sta *)sta->drv_priv;
+
+	if (!ath11k_smart_ant_enabled(ar) || !arsta->smart_ant_sta)
+		return;
+
+	ath11k_dbg(ar->ab, ATH11K_DBG_SMART_ANT,
+		   "Smart antenna disconnect for %pM\n", sta->addr);
+
+	kfree(arsta->smart_ant_sta);
+}
+
+int ath11k_smart_ant_alg_sta_connect(struct ath11k *ar,
+				     struct ath11k_vif *arvif,
+				     struct ieee80211_sta *sta)
+{
+	struct ath11k_sta *arsta = (struct ath11k_sta *)sta->drv_priv;
+	struct ath11k_smart_ant_node_config_params params;
+	struct ath11k_smart_ant_sta *smart_ant_sta;
+	int ret;
+	u8 mac_addr[ETH_ALEN];
+
+	lockdep_assert_held(&ar->conf_mutex);
+
+	if (arvif->vdev_type != WMI_VDEV_TYPE_AP ||
+	    arvif->vdev_subtype != WMI_VDEV_SUBTYPE_NONE)
+		return 0;
+
+	memset(&params, 0, sizeof(params));
+
+	params.cmd_id = 1;
+	params.arg_count = 1;
+	params.vdev_id = arsta->arvif->vdev_id;
+	params.arg_arr = ATH11K_SMART_ANT_TX_FEEDBACK_CONFIG_DEFAULT;
+	ether_addr_copy(mac_addr, sta->addr);
+
+	ret = ath11k_wmi_peer_set_smart_ant_node_config(ar, mac_addr, &params);
+	if (ret) {
+		ath11k_warn(ar->ab, "Failed to set feedback config\n");
+		return ret;
+	}
+
+	smart_ant_sta = kzalloc(sizeof(struct ath11k_smart_ant_sta), GFP_ATOMIC);
+	if (!smart_ant_sta) {
+		ath11k_warn(ar->ab, "Failed to allocate smart ant sta\n");
+		ret = -EINVAL;
+		return ret;
+	}
+
+	arsta->smart_ant_sta = smart_ant_sta;
+
+	return 0;
+}
+
+int ath11k_smart_ant_alg_set_default(struct ath11k_vif *arvif)
+{
+	struct ath11k *ar = arvif->ar;
+	struct ath11k_smart_ant_info *info = &ar->smart_ant_info;
+	int ret, i;
+	u32 tx_ants[ATH11K_SMART_ANT_MAX_RATE_SERIES];
+
+	lockdep_assert_held(&ar->conf_mutex);
+
+	if (!ath11k_smart_ant_enabled(ar))
+		return 0;
+
+	if (!info->enabled)
+		return 0;
+
+	if (arvif->vdev_type != WMI_VDEV_TYPE_AP ||
+	    arvif->vdev_subtype != WMI_VDEV_SUBTYPE_NONE) {
+		ath11k_dbg(ar->ab, ATH11K_DBG_SMART_ANT,
+			   "Smart antenna logic not enabled for non-AP interface\n");
+		return 0;
+	}
+
+	/* Set default tx/rx antennas to start with */
+	ret = ath11k_wmi_pdev_set_rx_ant(ar, info->default_ant);
+	if (ret) {
+		ath11k_warn(ar->ab, "Failed to set rx antenna\n");
+		return ret;
+	}
+
+	/* Tx antenna for every fallback rate series */
+	for (i = 0; i < info->num_fallback_rate; i++)
+		tx_ants[i] = info->default_ant;
+
+	ret = ath11k_wmi_peer_set_smart_tx_ant(ar, arvif->vdev_id,
+					       arvif->vif->addr, tx_ants);
+	if (ret)
+		ath11k_warn(ar->ab, "Failed to set tx antenna\n");
+
+	return ret;
+}
+
+void ath11k_smart_ant_alg_disable(struct ath11k_vif *arvif)
+{
+	struct ath11k *ar = arvif->ar;
+	struct ath11k_smart_ant_info *info = &ar->smart_ant_info;
+	int ret;
+
+	lockdep_assert_held(&ar->conf_mutex);
+
+	if (!ath11k_smart_ant_enabled(ar))
+		return;
+
+	if (!info->enabled)
+		return;
+
+	if (arvif->vdev_type != WMI_VDEV_TYPE_AP ||
+	    arvif->vdev_subtype != WMI_VDEV_SUBTYPE_NONE)
+		return;
+
+	/* See if this is the last vif requesting to disable smart antenna */
+	info->num_enabled_vif--;
+	if (info->num_enabled_vif != 0)
+		return;
+
+	/* Disable smart antenna logic in fw */
+	ret = ath11k_wmi_pdev_disable_smart_ant(ar, info);
+	if (ret) {
+		ath11k_err(ar->ab, "Wmi command to disable smart antenna is failed\n");
+		return;
+	}
+
+	info->enabled = false;
+}
+
+int ath11k_smart_ant_alg_enable(struct ath11k_vif *arvif)
+{
+	struct ath11k *ar = arvif->ar;
+	struct ath11k_smart_ant_info *info = &ar->smart_ant_info;
+	int ret;
+
+	lockdep_assert_held(&ar->conf_mutex);
+
+	if (!ath11k_smart_ant_enabled(ar))
+		return 0;
+
+	/* Smart antenna is tested with only AP mode, it can also be enabled
+	 * for other modes, just needs more testing.
+	 */
+	if (arvif->vdev_type != WMI_VDEV_TYPE_AP ||
+	    arvif->vdev_subtype != WMI_VDEV_SUBTYPE_NONE) {
+		ath11k_dbg(ar->ab, ATH11K_DBG_SMART_ANT,
+			   "Smart antenna logic not enabled for non-AP interface\n");
+		return 0;
+	}
+
+	info->num_enabled_vif++;
+	if (info->enabled)
+		return 0;
+
+	smart_ant_alg_init_param(ar);
+
+	ath11k_dbg(ar->ab, ATH11K_DBG_SMART_ANT,
+		   "Hw supports Smart antenna, enabling it in driver\n");
+
+	info->enabled = true;
+
+	ath11k_dbg(ar->ab, ATH11K_DBG_SMART_ANT,
+		   "smart mode: %d num_fallback_rate: %d num_rx_chain: %d info_enable: %d\n",
+		   ar->smart_ant_info.mode, ar->smart_ant_info.num_fallback_rate,
+		   ar->smart_ant_info.smart_ant_params.num_rx_chain, info->enabled);
+
+	/* Enable smart antenna logic in fw with mode and default antenna */
+	ret = ath11k_wmi_pdev_enable_smart_ant(ar, info);
+	if (ret) {
+		ath11k_err(ar->ab, "Wmi command to enable smart antenna is failed\n");
+		return ret;
+	}
+
+	return 0;
+}
Index: backports-20210222_001-5.4.89-b157d2276/drivers/net/wireless/ath/ath11k/smart_ant_api.h
===================================================================
--- /dev/null
+++ backports-20210222_001-5.4.89-b157d2276/drivers/net/wireless/ath/ath11k/smart_ant_api.h
@@ -0,0 +1,276 @@
+/* SPDX-License-Identifier: BSD-3-Clause-Clear */
+/*
+ * Copyright (c) 2015, 2021 The Linux Foundation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted (subject to the limitations in the
+ * disclaimer below) provided that the following conditions are met:
+ *
+ * Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ *
+ * Redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the
+ * distribution.
+ *
+ * Neither the name of  The Linux Foundation nor the names of its
+ * contributors may be used to endorse or promote products derived
+ * from this software without specific prior written permission.
+
+ * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
+ * GRANTED BY THIS LICENSE.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
+ * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef _SMART_ANT_ALG_
+#define _SMART_ANT_ALG_
+
+#define ATH11K_SMART_ANT_FALLBACK_RATE_DEFAULT  1
+#define ATH11K_SMART_ANT_TX_FEEDBACK            0x10
+#define ATH11K_SMART_ANT_RX_FEEDBACK            0x20
+#define ATH11K_SMART_ANT_PER_MIN_THRESHOLD      20
+#define ATH11K_SMART_ANT_PER_MAX_THRESHOLD      80
+#define ATH11K_SMART_ANT_PER_DIFF_THRESHOLD     3
+#define ATH11K_SMART_ANT_PKT_LEN_DEFAULT        1536
+#define ATH11K_SMART_ANT_MAX_CHAINS             4
+#define ATH11K_SMART_ANT_NUM_PKT_MIN            344
+#define ATH11K_SMART_ANT_RETRAIN_INTVL          (2 * 60000)     /* msecs */
+#define ATH11K_SMART_ANT_PERF_TRAIN_INTVL       2000            /* msecs */
+#define ATH11K_SMART_ANT_TPUT_DELTA_DEFAULT     10
+#define ATH11K_SMART_ANT_HYSTERISYS_DEFAULT     3
+#define ATH11K_SMART_ANT_MIN_GOODPUT_THRESHOLD  6
+#define ATH11K_SMART_ANT_GOODPUT_INTVL_AVG      2
+#define ATH11K_SMART_ANT_IGNORE_GOODPUT_INTVL   1
+#define ATH11K_SMART_ANT_PRETRAIN_PKTS_MAX      600
+#define ATH11K_SMART_ANT_BW_THRESHOLD           64
+#define ATH11K_SMART_ANT_NUM_PKT_THRESHOLD_20   20
+#define ATH11K_SMART_ANT_NUM_PKT_THRESHOLD_40   10
+#define ATH11K_SMART_ANT_NUM_PKT_THRESHOLD_80   5
+#define ATH11K_SMART_ANT_DEFAULT_ANT            5
+#define ATH11K_SMART_ANT_NUM_TRAIN_PPDU_MAX     50
+#define ATH11K_SMART_ANT_MAX_RX_CHAIN           4
+#define ATH11K_SMART_ANT_MAX_RATE_SERIES        4
+#define ATH11K_SMART_ANT_BYTES_IN_DWORD         4
+#define ATH11K_SMART_ANT_MASK_BYTES             0xff
+#define ATH11K_SMART_ANT_LEGACY_RATE_WORDS      6
+#define ATH11K_SMART_ANT_WORDS_IN_DWORD         2
+#define ATH11K_SMART_ANT_WORD_BITS_LEN          16
+#define ATH11K_SMART_ANT_MASK_RCODE             0x7ff
+#define ATH11K_SMART_ANT_MAX_HT_RATE_WORDS      48
+#define ATH11K_SMART_ANT_MAX_RATES              44
+#define ATH11K_SMART_ANT_RSSI_SAMPLE            10
+
+#define ATH11K_SMART_ANT_TX_FEEDBACK_CONFIG_DEFAULT 0xe4
+
+/* Max number of antenna combinations 2 ^ max_supported_ant */
+#define ATH11K_SMART_ANT_COMB_MAX               16
+
+enum ath11k_smart_ant_bw {
+	ATH11K_SMART_ANT_BW_20,
+	ATH11K_SMART_ANT_BW_40,
+	ATH11K_SMART_ANT_BW_80,
+	ATH11K_SMART_ANT_BW_MAX
+};
+
+enum ath11k_smart_ant_train_trigger {
+	ATH11K_SMART_ANT_TRAIN_INIT              = 1 << 0,
+	ATH11K_SMART_ANT_TRAIN_TRIGGER_PERIODIC  = 1 << 1,
+	ATH11K_SMART_ANT_TRAIN_TRIGGER_PERF      = 1 << 2,
+	ATH11K_SMART_ANT_TRAIN_TRIGGER_RX        = 1 << 4,
+};
+
+enum ath11k_smart_ant_band_id {
+	ATH11K_SMART_ANT_BAND_UNSPECIFIED = 0,
+	ATH11K_SMART_ANT_BAND_2GHZ	  = 1,
+	ATH11K_SMART_ANT_BAND_5GHZ	  = 2,
+	ATH11K_SMART_ANT_BAND_6GHZ	  = 3,
+	ATH11K_SMART_ANT_BAND_MAX,
+
+};
+
+enum ath11k_wireless_mode {
+	ATH11K_WIRELESS_MODE_LEGACY,
+	ATH11K_WIRELESS_MODE_HT,
+	ATH11K_WIRELESS_MODE_VHT,
+};
+
+struct ath11k_smart_ant_node_config_params {
+	u8 vdev_id;
+	u32 cmd_id;
+	u16 arg_count;
+	u32 *arg_arr;
+};
+
+struct ath11k_smart_ant_peer_phy_info {
+	u8 rxstreams;
+	u8 streams;
+	u8 cap;
+	u32 mode;
+	u32 ext_mode;
+};
+
+struct ath11k_smart_ant_ratetoindex {
+	u8 ratecode;
+	u8 rateindex;
+};
+
+struct ath11k_smart_ant_rate_info {
+	struct ath11k_smart_ant_ratetoindex rates[ATH11K_SMART_ANT_MAX_RATES];
+	u8 num_of_rates;
+	u8 selected_antenna;
+};
+
+struct ath11k_smart_ant_train_info {
+	u8 vdev_id;
+	u32 rate_array[ATH11K_SMART_ANT_MAX_RATE_SERIES];
+	u32 antenna_array[ATH11K_SMART_ANT_MAX_RX_CHAIN];
+	u32 numpkts;
+};
+
+struct ath11k_smart_ant_train_data {
+	u32 antenna;
+	u32 ratecode;
+	u16 nframes;
+	u16 nbad;
+	u8 rssi[ATH11K_SMART_ANT_MAX_CHAINS][ATH11K_SMART_ANT_RSSI_SAMPLE];
+	u16 last_nframes;
+	u16 numpkts;
+	u8 cts_prot;
+	u8 samples;
+};
+
+struct ath11k_peer_rate_code_list_cap {
+	u32 rtcode_legacy[WMI_CCK_OFDM_RATES_MAX];
+	u32 rtcode_20[WMI_MCS_RATES_MAX];
+	u32 rtcode_40[WMI_MCS_RATES_MAX];
+	u32 rtcode_80[WMI_MCS_RATES_MAX];
+	u32 rt_count[WMI_RATE_COUNT_MAX];
+};
+
+struct ath11k_smart_ant_sta {
+	struct ath11k *ar;
+	u8 mac_addr[ETH_ALEN];
+	u8 max_bw;
+	u8 txrx_chainmask;
+	u8 mode;
+	enum ath11k_wireless_mode wmode;
+	u8 channel;
+	enum ath11k_smart_ant_band_id band;
+	u32 ni_cap;
+	struct ath11k_peer_rate_code_list_cap rate_cap;
+	struct ath11k_smart_ant_train_info train_info;
+	struct ath11k_smart_ant_train_data train_data;
+};
+
+/**
+ * struct smart_ant_enable_params - Smart antenna params
+ * @enable: Enable/Disable
+ * @mode: SA mode
+ * @rx_antenna: RX antenna config
+ * @gpio_pin : GPIO pin config
+ * @gpio_func : GPIO function config
+ */
+struct smart_ant_enable_params {
+	u32 gpio_pin[WMI_SMART_ANTENNA_HAL_MAX];
+	u32 gpio_func[WMI_SMART_ANTENNA_HAL_MAX];
+};
+
+struct smart_ant_tx_ant_params {
+	u32 *antenna_array;
+	u8 vdev_id;
+};
+
+struct ath11k_smart_ant_params {
+	u8 low_rate_threshold;
+	u8 hi_rate_threshold;
+	u8 per_diff_threshold;
+	u16 num_train_pkts;
+	u16 pkt_len;
+	u8 num_tx_ant_comb;
+	u8 num_rx_chain;
+	u16 num_min_pkt;
+	u32 retrain_interval;
+	u32 perf_train_interval;
+	u8 max_perf_delta;
+	u8 hysteresis;
+	u8 min_goodput_threshold;
+	u8 avg_goodput_interval;
+	u8 ignore_goodput_interval;
+	u16 num_pretrain_pkts;
+	u16 num_other_bw_pkts_threshold;
+	u8 enabled_train;
+	u16 num_pkt_min_threshod[ATH11K_SMART_ANT_BW_MAX];
+	u32 default_tx_ant;
+	u8 ant_change_ind;
+	u16 max_train_ppdu;
+};
+
+struct ath11k_smart_ant_info {
+	struct ath11k_smart_ant_params smart_ant_params;
+	u8 num_fallback_rate;
+	enum ath11k_smart_ant_band_id band_id;
+	u8 txrx_chainmask;
+	u32 txrx_feedback;
+	u32 default_ant;
+	u32 rx_antenna;
+	u8 num_sta_per_ant[ATH11K_SMART_ANT_COMB_MAX];
+	u16 num_sta_conneted;
+	u8 mode;
+	bool enabled;
+	u32 num_enabled_vif;
+};
+
+#ifdef CPTCFG_ATH11K_SMART_ANT_ALG
+int ath11k_smart_ant_alg_enable(struct ath11k_vif *arvif);
+void ath11k_smart_ant_alg_disable(struct ath11k_vif *arvif);
+int ath11k_smart_ant_alg_set_default(struct ath11k_vif *arvif);
+int ath11k_smart_ant_alg_sta_connect(struct ath11k *ar,
+				     struct ath11k_vif *arvif,
+				     struct ieee80211_sta *sta);
+void ath11k_smart_ant_alg_sta_disconnect(struct ath11k *ar,
+					 struct ieee80211_sta *sta);
+#else
+static inline
+int ath11k_smart_ant_alg_enable(struct ath11k_vif *arvif)
+{
+	return 0;
+}
+
+static inline
+void ath11k_smart_ant_alg_disable(struct ath11k_vif *arvif)
+{
+}
+
+static inline
+int ath11k_smart_ant_alg_set_default(struct ath11k_vif *arvif)
+{
+	return 0;
+}
+
+static inline
+int ath11k_smart_ant_alg_sta_connect(struct ath11k *ar,
+				     struct ath11k_vif *arvif,
+				     struct ieee80211_sta *sta)
+{
+	return 0;
+}
+
+static inline
+void ath11k_smart_ant_alg_sta_disconnect(struct ath11k *ar,
+					 struct ieee80211_sta *sta)
+{
+}
+
+#endif /* CPTCFG_ATH11K_SMART_ANT_ALG */
+#endif /* _SMART_ANT_ALG_ */
